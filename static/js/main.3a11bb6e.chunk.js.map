{"version":3,"sources":["components/ValueLabel.js","components/Slider.jsx","components/Navitem.jsx","components/Element.jsx","algorithms/sorting.js","components/Arraybar.jsx","components/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","thumb","transform","open","offset","zIndex","typography","body2","fontSize","pxToRem","lineHeight","transition","transitions","create","duration","shortest","top","left","transformOrigin","position","circle","display","alignItems","justifyContent","width","height","borderRadius","backgroundColor","label","color","palette","primary","contrastText","name","props","children","classes","className","value","valueLabelDisplay","React","cloneElement","clsx","PrettoSlider","root","marginTop","marginRight","marginLeft","active","disabled","border","boxShadow","valueLabel","track","rail","Slider","MySlider","state","this","onRef","undefined","defaultValue","min","max","ValueLabelComponent","ValueLabel","onChange","event","newValue","Component","Navitem","handleChangeItem","item","setState","curItem","onChangeItem","type","Button","id","onClick","Dropdown","Toggle","Menu","itemList","map","Item","key","onSelect","HEIGHT","window","innerHeight","Element","setElement","setAnimation","animation","animationType","DEFAULT","animationname","RED","BLUE","YELLOW","PURPLE","PINK","style","swap","arr","i","j","temp","insertionSortHelper","l","r","animations","push","k","compSwap","dir","isSorted","isGreater","bitonicSortHelper","cnt","Math","floor","bitonicMerge","greatestPowerOfTwoLessThan","length","quickSortHelper","partitionIdx","pivot","pivotElement","partition","random","getRandomPivot","mergeSortHelper","m","n1","n2","L","Array","R","idxL","idxR","merge","heapify","n","largestIdx","countSort","minValue","exp","radix","sortedArr","buckets","fill","firstBuckets","bucketIdx","overwriting","includes","unshift","radixMSDSort","radixMSDSortHelper","sameElements","maxValue","getMostExp","copy","WIDTH","innerWidth","randomIntFromInterval","Arraybar","generate","arraySize","ceil","array","isVisualized","constructInitArray","setArray","algorithm","speed","resetAnimations","bubbleSort","bubbleSortAnimations","insertionSort","insertionSortAnimations","minIdx","selectionSort","selectionSortAnimations","swapped","cocktailShakerSort","cocktailShakerSortAnimations","pos","gnomeSort","gnomeSortAnimations","bitonicSort","bitonicSortAnimations","gaps","shift","sedgewickGap","gap","shellSort","shellSortAnimations","quickSort","quickSortAnimations","mergeSort","mergeSortAnimations","heapSort","heapSortAnimations","radixLSDSort","radixLSDSortAnimations","radixMSDSortAnimations","bucketSize","output","bucketSort","bucketSortAnimations","setTimeout","finishVisualization","barOneIdx","barTwoIdx","barOneValue","barTwoValue","barIdx","isPivot","idx","isBucket","bucketColor","ref","algorithms","speeds","SortingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeSpeed","speedname","curSpeed","handleRandomGenerate","arrayBar","randomGenerateArray","handleChangeArraySize","handleVisualize","slider","visualize","handleFinishVisualization","Navbar","variant","Brand","href","Nav","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mZA4EeA,mBAxEA,SAAAC,GAAK,MAAK,CACvBC,MAAO,CACL,SAAU,CACR,YAAa,CACXC,UAAW,gCAIjBC,KAAM,GACNC,OAAO,aACLC,OAAQ,GACLL,EAAMM,WAAWC,MAFhB,CAGJC,SAAUR,EAAMM,WAAWG,QAAQ,IACnCC,WAAY,IACZC,WAAYX,EAAMY,YAAYC,OAAO,CAAC,aAAc,CAClDC,SAAUd,EAAMY,YAAYE,SAASC,WAEvCC,KAAM,GACNC,KAAM,oBACNC,gBAAiB,gBACjBhB,UAAW,WACXiB,SAAU,aAEZC,OAAQ,CACNC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,MAAO,GACPC,OAAQ,GACRC,aAAc,gBACdC,gBAAiB,eACjBzB,UAAW,kBAEb0B,MAAO,CACLC,MAAO7B,EAAM8B,QAAQC,QAAQC,aAC7B9B,UAAW,oBAqCmB,CAAE+B,KAAM,qBAA3BlC,EAjCf,SAAoBmC,GAAQ,IAExBC,EAMED,EANFC,SACAC,EAKEF,EALFE,QACAC,EAIEH,EAJFG,UACAlC,EAGE+B,EAHF/B,KACAmC,EAEEJ,EAFFI,MACAC,EACEL,EADFK,kBAGF,MAA0B,QAAtBA,EACKJ,EAGFK,IAAMC,aACXN,EACA,CACEE,UAAWK,YACTP,EAASD,MAAMG,UADF,eAGVD,EAAQjC,KAAOA,GAA8B,OAAtBoC,GAE1BH,EAAQnC,QAGZ,0BAAMoC,UAAWK,YAAKN,EAAQhC,OAAQiC,IACpC,0BAAMA,UAAWD,EAAQhB,QACvB,0BAAMiB,UAAWD,EAAQR,OAAQU,SCjEnCK,EAAe5C,YAAW,CAC9B6C,KAAM,CACJf,MAAO,oBACPJ,OAAQ,EACRD,MAAO,IACPqB,UAAW,EACXC,YAAa,GACbC,WAAY,GAEdC,OAAQ,GACRC,SAAU,GACVhD,MAAO,CACLwB,OAAQ,GACRD,MAAO,GACPG,gBAAiB,OACjBuB,OAAQ,yBACRL,WAAY,EACZE,YAAa,EACb,aAAc,CACZvB,MAAO,GACPC,OAAQ,GACRE,gBAAiB,iBACjBkB,WAAY,EACZE,YAAa,EACb,UAAW,CACTI,UAAW,SAGf,2BAA4B,CAC1BA,UAAW,YAGfC,WAAY,CACVnC,KAAM,mBACND,IAAK,SAEPqC,MAAO,CACL5B,OAAQ,EACRC,aAAc,GAEhB4B,KAAM,CACJ7B,OAAQ,EACRC,aAAc,IA1CG3B,CA4ClBwD,KA6BYC,E,2MA1BbC,MAAQ,CAAER,UAAU,G,mFAGlBS,KAAKxB,MAAMyB,MAAMD,Q,6CAIjBA,KAAKxB,MAAMyB,WAAMC,K,+BAGT,IAAD,OACP,OACE,kBAACjB,EAAD,CACEJ,kBAAkB,OAClBsB,aAAc,GACdC,IAAK,EACLC,IAAK,IACLd,SAAUS,KAAKD,MAAMR,SAErBe,oBAAqBC,EACrBC,SAAU,SAACC,EAAOC,GAAR,OAAqB,EAAKlC,MAAMgC,SAASC,EAAOC,U,GArB3CC,a,gBCGRC,G,kBAhDb,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRqC,iBAAmB,SAAAC,GACjB,EAAKC,SAAS,CAAEC,QAASF,IACzB,EAAKtC,MAAMyC,aAAaH,IALxB,EAAKf,MAAQ,CAAExB,KAAMC,EAAMD,KAAM2C,KAAM1C,EAAM0C,KAAMF,QAASxC,EAAMwC,SAFjD,E,sEAUT,IAAD,OAEP,MAAa,WADIhB,KAAKD,MAAdmB,KAGJ,4BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,SAASC,QAASrB,KAAKxB,MAAM6C,SACrCrB,KAAKD,MAAMxB,OAMhB,4BACE,kBAAC+C,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBH,GAAG,mBACjBpB,KAAKD,MAAMxB,KAAO,MAAQyB,KAAKD,MAAMiB,QAAU,MAGlD,kBAACM,EAAA,EAASE,KAAV,KACGxB,KAAKxB,MAAMiD,SAASC,KAAI,SAAAZ,GACvB,OACE,kBAACQ,EAAA,EAASK,KAAV,CACEC,IAAKd,EACLe,SAAU,kBAAM,EAAKhB,iBAAiBC,IACtCM,GAAG,iBAEFN,a,GArCCH,c,OCFhBmB,G,MAASC,OAAOC,aAsDPC,E,YAnDb,WAAYzD,GAAQ,IAAD,8BACjB,4CAAMA,KAgBR0D,WAAa,SAACtD,EAAOd,GACnB,EAAKiD,SAAS,CAAEnC,QAAOd,WAlBN,EAqBnBqE,aAAe,SAAAC,GACb,EAAKrB,SAAS,CAAEqB,eApBhB,EAAKrC,MAAQ,CACXnB,MAAOJ,EAAMI,MACbd,MAAOU,EAAMV,MACbsE,UAAWC,EAAcC,SALV,E,iFAUjBtC,KAAKxB,MAAMyB,MAAMD,Q,6CAIjBA,KAAKxB,MAAMyB,WAAMC,K,+BAWT,IAAD,EAC2BF,KAAKD,MAAjCjC,EADC,EACDA,MAAOc,EADN,EACMA,MAAOwD,EADb,EACaA,UAChBG,EACFH,IAAcC,EAAcG,IACxB,MACAJ,IAAcC,EAAcI,KAC5B,OACAL,IAAcC,EAAcK,OAC5B,SACAN,IAAcC,EAAcM,OAC5B,SACAP,IAAcC,EAAcO,KAC5B,OACA,GACN,OACE,yBACEjE,UAAS,oBAAe4D,GACxBM,MAAO,CACL/E,MAAM,GAAD,OAAKA,EAAL,MACLC,OAAO,GAAD,OAAQa,EAAQkD,EAAU,IAAO,IAAO,IAAxC,a,GA7CMnB,aAsDT0B,EAAgB,CAC3BC,QAAS,EACTE,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,OAAQ,EACRC,KAAM,GCjER,SAASE,EAAKC,EAAKC,EAAGC,GACpB,IAAIC,EAAOH,EAAIC,GACfD,EAAIC,GAAKD,EAAIE,GACbF,EAAIE,GAAKC,EAmCX,SAASC,EAAoBJ,EAAKK,EAAGC,EAAGC,GAElCF,IAAMC,IAERC,EAAWC,KAAK,CAACH,IACjBE,EAAWC,KAAK,CAACH,IACjBE,EAAWC,KAAK,CAACH,IAGjBE,EAAWC,KAAK,CAACH,EAAGL,EAAIK,IAAI,KAI9B,IAAK,IAAIJ,EAAII,EAAI,EAAGJ,GAAKK,EAAGL,IAAK,CAC/B,IAAIC,OAAC,EACDC,EAAOH,EAAIC,GAGf,IAAKC,EAAID,EAAGC,EAAIG,GAAKL,EAAIE,EAAI,GAAKC,EAAMD,IAEtCK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IAGjBK,EAAWC,KAAK,CAACN,EAAGF,EAAIE,EAAI,GAAID,IAAMK,IACtCN,EAAIE,GAAKF,EAAIE,EAAI,GAcnB,GAVAK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IAGjBK,EAAWC,KAAK,CAACN,EAAGC,EAAMF,IAAMK,IAEhCN,EAAIE,GAAKC,EAGLF,IAAMK,EACR,IAAK,IAAIG,EAAIP,EAAI,EAAGO,GAAKJ,EAAGI,IAE1BF,EAAWC,KAAK,CAACC,IACjBF,EAAWC,KAAK,CAACC,IACjBF,EAAWC,KAAK,CAACC,IAGjBF,EAAWC,KAAK,CAACC,EAAGT,EAAIS,GAAIR,IAAMK,KAwJ1C,SAASI,EAASV,EAAKC,EAAGC,EAAGS,EAAKJ,EAAYK,GAE5C,IAAMC,EAAYb,EAAIC,GAAKD,EAAIE,GAE/BK,EAAWC,KAAK,CAACP,EAAGC,IACpBK,EAAWC,KAAK,CAACP,EAAGC,IACpBK,EAAWC,KAAK,CAACP,EAAGC,IAChBS,IAAQE,GACVN,EAAWC,KAAK,CAACP,EAAGC,EAAGF,EAAIC,GAAID,EAAIE,GAAIU,IACvCb,EAAKC,EAAKC,EAAGC,IAEbK,EAAWC,KAAK,CAACP,EAAGC,EAAGF,EAAIE,GAAIF,EAAIC,GAAIW,IAsB3C,SAASE,EAAkBd,EAAKK,EAAGU,EAAKJ,EAAKJ,GAC3C,KAAIQ,GAAO,GAAX,CAEA,IAAIN,EAAIO,KAAKC,MAAMF,EAAM,GAGzBD,EAAkBd,EAAKK,EAAGI,GAAIE,EAAKJ,GAGnCO,EAAkBd,EAAKK,EAAII,EAAGM,EAAMN,EAAGE,EAAKJ,GArB9C,SAASW,EAAalB,EAAKK,EAAGU,EAAKJ,EAAKJ,EAAYK,GAClD,KAAIG,GAAO,GAAX,CAGA,IADA,IAAIN,EATN,SAAoCM,GAElC,IADA,IAAIN,EAAI,EACDA,EAAI,GAAKA,EAAIM,GAAKN,IAAS,EAClC,OAAOA,GAAK,EAMJU,CAA2BJ,GAC1Bd,EAAII,EAAGJ,EAAII,EAAIU,EAAMN,EAAGR,IAC/BS,EAASV,EAAKC,EAAGA,EAAIQ,EAAGE,EAAKJ,EAAYK,GAAYG,EAAMN,IAAM,GAEnES,EAAalB,EAAKK,EAAGI,EAAGE,EAAKJ,EAAYK,GACzCM,EAAalB,EAAKK,EAAII,EAAGM,EAAMN,EAAGE,EAAKJ,EAAYK,IAgBnDM,CAAalB,EAAKK,EAAGU,EAAKJ,EAAKJ,EAAYQ,IAAQf,EAAIoB,SAwGzD,SAASC,EAAgBrB,EAAKK,EAAGC,EAAGC,GAClC,KAAIF,EAAIC,GAAR,CACA,IACMgB,EAlCR,SAAmBtB,EAAKK,EAAGC,EAAGiB,EAAOhB,GACnC,IAAIe,EAAejB,EAAI,EACjBmB,EAAexB,EAAIuB,GAEzBhB,EAAWC,KAAK,CAACF,EAAGiB,IACpBhB,EAAWC,KAAK,CAACF,EAAGiB,IACpBhB,EAAWC,KAAK,CAACF,EAAGiB,IACpBhB,EAAWC,KAAK,CAACF,EAAGiB,EAAOvB,EAAIM,GAAIN,EAAIuB,GAAQ,IAC/CxB,EAAKC,EAAKM,EAAGiB,GAEb,IAAK,IAAItB,EAAII,EAAGJ,EAAIK,EAAGL,IACrBM,EAAWC,KAAK,CAACP,EAAGqB,EAAe,IACnCf,EAAWC,KAAK,CAACP,EAAGqB,EAAe,IACnCf,EAAWC,KAAK,CAACP,EAAGqB,EAAe,IAE/BtB,EAAIC,IAAMuB,GACZjB,EAAWC,KAAK,CAACP,EAAGqB,EAAe,EAAGtB,EAAIC,GAAID,EAAIsB,EAAe,GAAI,IACrEvB,EAAKC,EAAKC,IAAKqB,IAEff,EAAWC,KAAK,CAACP,EAAGqB,EAAe,EAAGtB,EAAIsB,EAAe,GAAItB,EAAIC,GAAI,IASzE,OALAM,EAAWC,KAAK,CAACF,EAAGgB,EAAe,IACnCf,EAAWC,KAAK,CAACF,EAAGgB,EAAe,IACnCf,EAAWC,KAAK,CAACF,EAAGgB,EAAe,IACnCf,EAAWC,KAAK,CAACF,EAAGgB,EAAe,EAAGtB,EAAIM,GAAIN,EAAIsB,EAAe,GAAI,IACrEvB,EAAKC,EAAKM,IAAKgB,GACRA,EAMcG,CAAUzB,EAAKK,EAAGC,EAtCzC,SAAwBD,EAAGC,GACzB,OAAOD,EAAIW,KAAKC,MAAMD,KAAKU,UAAYpB,EAAID,EAAI,IAoCjCsB,CAAetB,EAAGC,GACiBC,GAEjDc,EAAgBrB,EAAKsB,EAAe,EAAGhB,EAAGC,GAC1Cc,EAAgBrB,EAAKK,EAAGiB,EAAe,EAAGf,IA2E5C,SAASqB,EAAgB5B,EAAKK,EAAGC,EAAGC,GAClC,GAAIF,IAAMC,EAAV,CAEA,IAAMuB,EAAIxB,EAAIW,KAAKC,OAAOX,EAAID,GAAK,GACnCuB,EAAgB5B,EAAKK,EAAGwB,EAAGtB,GAC3BqB,EAAgB5B,EAAK6B,EAAI,EAAGvB,EAAGC,GArEjC,SAAeP,EAAKK,EAAGC,EAAGuB,EAAGtB,GAO3B,IANA,IAAMuB,EAAKD,EAAIxB,EAAI,EACb0B,EAAKzB,EAAIuB,EACTG,EAAI,IAAIC,MAAMH,GACdI,EAAI,IAAID,MAAMF,GAGX9B,EAAI,EAAGA,EAAI6B,EAAI7B,IACtB+B,EAAE/B,GAAKD,EAAIC,EAAII,GAIjB,IAAK,IAAIJ,EAAI,EAAGA,EAAI8B,EAAI9B,IACtBiC,EAAEjC,GAAKD,EAAIC,EAAI4B,EAAI,GASrB,IANA,IAAIpB,EAAIJ,EACJ8B,EAAO,EACPC,EAAO,EACLxB,EAAiB,IAANP,GAAWC,IAAMN,EAAIoB,OAAS,EAGxCe,EAAOL,GAAMM,EAAOL,GACzBxB,EAAWC,KAAK,CAAC2B,EAAO9B,EAAG+B,EAAOP,EAAI,IACtCtB,EAAWC,KAAK,CAAC2B,EAAO9B,EAAG+B,EAAOP,EAAI,IACtCtB,EAAWC,KAAK,CAAC2B,EAAO9B,EAAG+B,EAAOP,EAAI,IAElCG,EAAEG,GAAQD,EAAEE,IACd7B,EAAWC,KAAK,CAACC,EAAGuB,EAAEG,GAAOvB,EAAUuB,EAAO9B,IAC9CL,EAAIS,KAAOuB,EAAEG,OAEb5B,EAAWC,KAAK,CAACC,EAAGyB,EAAEE,IAAO,EAAO3B,IACpCT,EAAIS,KAAOyB,EAAEE,MAKjB,KAAOD,EAAOL,GACZvB,EAAWC,KAAK,CAAC2B,EAAO9B,EAAG8B,EAAO9B,IAClCE,EAAWC,KAAK,CAAC2B,EAAO9B,EAAG8B,EAAO9B,IAClCE,EAAWC,KAAK,CAAC2B,EAAO9B,EAAG8B,EAAO9B,IAClCE,EAAWC,KAAK,CAACC,EAAGuB,EAAEG,GAAOvB,EAAUuB,EAAO9B,IAC9CL,EAAIS,KAAOuB,EAAEG,KAGf,KAAOC,EAAOL,GACZxB,EAAWC,KAAK,CAAC4B,EAAOP,EAAI,EAAGO,EAAOP,EAAI,IAC1CtB,EAAWC,KAAK,CAAC4B,EAAOP,EAAI,EAAGO,EAAOP,EAAI,IAC1CtB,EAAWC,KAAK,CAAC4B,EAAOP,EAAI,EAAGO,EAAOP,EAAI,IAC1CtB,EAAWC,KAAK,CAACC,EAAGyB,EAAEE,IAAO,EAAO3B,IACpCT,EAAIS,KAAOyB,EAAEE,KAIf,GAAIxB,EACF,IAAK,IAAIX,EAAIkC,EAAO9B,EAAGJ,GAAKK,EAAGL,IAC7BM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,GAAIW,EAAUX,IAW1CoC,CAAMrC,EAAKK,EAAGC,EAAGuB,EAAGtB,IAWtB,SAAS+B,EAAQtC,EAAKuC,EAAGtC,EAAGM,GAC1B,GAAU,IAANgC,EAAJ,CACA,IAAIC,EAAavC,EACbI,EAAI,EAAIJ,EAAI,EACZK,EAAI,EAAIL,EAAI,EAEZI,EAAIkC,GAAKvC,EAAIK,GAAKL,EAAIwC,KAAaA,EAAanC,GAChDC,EAAIiC,GAAKvC,EAAIM,GAAKN,EAAIwC,KAAaA,EAAalC,GAEpDC,EAAWC,KAAK,CAACP,EAAGuC,IACpBjC,EAAWC,KAAK,CAACP,EAAGuC,IACpBjC,EAAWC,KAAK,CAACP,EAAGuC,IAEhBA,IAAevC,GAEjBM,EAAWC,KAAK,CAACP,EAAGuC,EAAYxC,EAAIC,GAAID,EAAIwC,IAAa,IACzDzC,EAAKC,EAAKC,EAAGuC,GAGbF,EAAQtC,EAAKuC,EAAGC,EAAYjC,IAE5BA,EAAWC,KAAK,CAACP,EAAGuC,EAAYxC,EAAIwC,GAAaxC,EAAIC,IAAI,KA6B7D,SAASwC,EAAUzC,EAAKuC,EAAGG,EAAUC,EAAKC,EAAOrC,GAC/C,IAAIsC,EAAY,IAAIZ,MAAMM,GACtBO,EAAU,IAAIb,MAAMW,GACxBC,EAAUE,KAAK,GACfD,EAAQC,KAAK,GAIb,IAHA,IAAIC,EAAe,GAGV/C,EAAI,EAAGA,EAAIsC,EAAGtC,IAAK,CAC1B,IAAMgD,EAAYjC,KAAKC,OAAOjB,EAAIC,GAAKyC,GAAYC,GAAOC,EAG1DrC,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,IAC5B6C,EAAQG,KAIV,IAAK,IAAIhD,EAAI,EAAGA,EAAI2C,EAAO3C,IAAK6C,EAAQ7C,IAAM6C,EAAQ7C,EAAI,GAG1D,cAAc6C,EAAd,gBAAK,IAAI7C,EAAC,KAAa+C,EAAaxC,KAAKP,EAAI,GAM7C,IAHA,IAAIiD,EAAc,GAGTjD,EAAIsC,EAAI,EAAGtC,GAAK,EAAGA,IAAK,CAC/B,IAAMgD,EAAYjC,KAAKC,OAAOjB,EAAIC,GAAKyC,GAAYC,GAAOC,EACtDI,EAAaG,SAASL,EAAQG,GAAa,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAGjD,EAAIC,IAAI,IACrDiD,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,MAE7CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAG,IAC1CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAG,IAC1CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAG,IAC1CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAGjD,EAAIC,IAAI,KAEpD4C,IAAYC,EAAQG,IAAcjD,EAAIC,GAGxC,cAAsBiD,EAAtB,gBAAK,IAAI7D,EAAS,KAAiBkB,EAAWC,KAAKnB,GAGnD,IAAK,IAAIY,EAAI,EAAGA,EAAIsC,EAAGtC,IAAKD,EAAIC,GAAK4C,EAAU5C,GAG/C,cAAc+C,EAAd,eAA4B,CAAvB,IAAI/C,EAAC,KACRM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,KAuJzB,SAASoD,EAAarD,EAAK4C,GAChC,IAAIrC,EAAa,GAGjB,OAjHF,SAAS+C,EAAmBtD,EAAKK,EAAGC,EAAGsC,EAAOrC,GAC5C,GAAIF,GAAKC,GANX,SAAsBN,EAAKK,EAAGC,GAC5B,IAAK,IAAIL,EAAII,EAAGJ,EAAIK,EAAGL,IAAK,GAAID,EAAIC,KAAOD,EAAIC,EAAI,GAAI,OAAO,EAC9D,OAAO,EAIOsD,CAAavD,EAAKK,EAAGC,GAEjC,IAAK,IAAIL,EAAII,EAAGJ,GAAKK,EAAGL,IACtBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,QANhC,CAWA,IAAI4C,EAAY,IAAIZ,MAAM3B,EAAID,EAAI,GAC9ByC,EAAU,IAAIb,MAAMW,GACxBC,EAAUE,KAAK,GACfD,EAAQC,KAAK,GAMb,IALA,IAAIC,EAAe,GAGfQ,EAAWxD,EAAIK,GACfqC,EAAW1C,EAAIK,GACVJ,EAAII,EAAI,EAAGJ,GAAKK,EAAGL,IAC1BuD,EAAWxC,KAAK1D,IAAIkG,EAAUxD,EAAIC,IAClCyC,EAAW1B,KAAK3D,IAAIqF,EAAU1C,EAAIC,IAGpC,IAAM0C,EArCR,SAAoBa,EAAUd,EAAUE,GAEtC,IADA,IAAID,EAAM,GACFa,EAAWd,GAAYC,GAAO,GAAGA,GAAOC,EAChD,OAAOD,EAAMC,EAkCDa,CAAWD,EAAUd,EAAUE,GAG3CrC,EAAWC,KAAK,CAACH,EAAG,IACpBE,EAAWC,KAAK,CAACH,EAAG,IACpBE,EAAWC,KAAK,CAACH,EAAG,IACpBE,EAAWC,KAAK,CAACH,EAAGL,EAAIK,IAAI,IAE5BE,EAAWC,KAAK,CAACF,EAAG,IACpBC,EAAWC,KAAK,CAACF,EAAG,IACpBC,EAAWC,KAAK,CAACF,EAAG,IACpBC,EAAWC,KAAK,CAACF,EAAGN,EAAIM,IAAI,IAG5B,IAAK,IAAIL,EAAII,EAAGJ,GAAKK,EAAGL,IAAK,CAC3B,IAAMgD,EAAYjC,KAAKC,OAAOjB,EAAIC,GAAKyC,GAAYC,GAAOC,EAGtD3C,IAAMI,GAAKJ,IAAMK,IACnBC,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,KAE9B6C,EAAQG,KAIV,cAAc,CAAC5C,EAAGC,GAAlB,eAAsB,CAAjB,IAAIL,EAAC,KACRM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,IAI9B,IAAK,IAAIA,EAAI,EAAGA,EAAI2C,EAAO3C,IAAK6C,EAAQ7C,IAAM6C,EAAQ7C,EAAI,GAI1D,IAHA,IAAMyD,EAAI,UAAOZ,GAGjB,MAAcA,EAAd,gBAAK,IAAI7C,EAAC,KAAa+C,EAAaxC,KAAKH,EAAIJ,EAAI,GAMjD,IAHA,IAAIiD,EAAc,GAGTjD,EAAIK,EAAGL,GAAKI,EAAGJ,IAAK,CAC3B,IAAMgD,EAAYjC,KAAKC,OAAOjB,EAAIC,GAAKyC,GAAYC,GAAOC,EACtDI,EAAaG,SAASL,EAAQG,GAAa,EAAI5C,IACjD6C,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAI5C,EAAGL,EAAIC,IAAI,IACzDiD,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAI5C,EAAG,IACjD6C,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAI5C,EAAG,IACjD6C,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAI5C,EAAG,MAEjD6C,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAI5C,EAAG,IAC9C6C,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAI5C,EAAG,IAC9C6C,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAI5C,EAAG,IAC9C6C,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAI5C,EAAGL,EAAIC,IAAI,KAExD4C,IAAYC,EAAQG,IAAcjD,EAAIC,GAGxC,cAAsBiD,EAAtB,gBAAK,IAAI7D,EAAS,KAAiBkB,EAAWC,KAAKnB,GAGnD,IAAK,IAAIY,EAAII,EAAGJ,GAAKK,EAAGL,IAAKD,EAAIC,GAAK4C,EAAU5C,EAAII,GAGpD,cAAc2C,EAAd,eAA4B,CAAvB,IAAI/C,EAAC,KACRM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,IAI9B,IAAK,IAAIA,GAAK,EAAGA,EAAI2C,EAAQ,EAAG3C,IAAK,CAGnCqD,EAAmBtD,GAFA,IAAPC,EAAWI,EAAIqD,EAAKzD,GAAKI,EACzBqD,EAAKzD,EAAI,GAAKI,EAAI,EACQuC,EAAOrC,KAO/C+C,CAAmBtD,EAAK,EADdA,EAAIoB,OACiB,EAAGwB,EAAOrC,GAClCA,ECrtBT,IAAMxB,EAASC,OAAOC,YAChB0E,EAAQ3E,OAAO4E,WAErB,SAASC,EAAsBxG,EAAKC,GAClC,OAAOD,EAAM2D,KAAKC,MAAMD,KAAKU,UAAYpE,EAAMD,EAAM,I,IAujBxCyG,E,YAnjBb,WAAYrI,GAAQ,IAAD,8BACjB,4CAAMA,KAEDuB,MAAQ,CAAE+G,SAAU,GAGzB,EAAKC,UAAY,GACjB,EAAKjJ,MAAQiG,KAAKiD,KAAM,IAAM,EAAKD,UAAY,KAAQL,GACvD,EAAKO,MAAQ,GACb,EAAKC,cAAe,EACpB,EAAKC,qBAVY,E,iFAcjBnH,KAAKxB,MAAMyB,MAAMD,Q,6CAIjBA,KAAKxB,MAAMyB,WAAMC,K,2CAIjB,IAAK,IAAI8C,EAAI,EAAGA,EAAIhD,KAAK+G,UAAW/D,IAClChD,KAAKiH,MAAM1D,KAAKqD,EAAsB,GAAI,Q,iCAK5C,IAAK,IAAI5D,EAAI,EAAGA,EAAIhD,KAAKiH,MAAM9C,OAAQnB,IACrChD,KAAK,WAAL,OAAgBgD,IAAKd,WAAWlC,KAAKiH,MAAMjE,GAAIhD,KAAKlC,OACpDkC,KAAK,WAAL,OAAgBgD,IAAKb,aAAaE,EAAcC,W,4CAKlD,IAAItC,KAAKkH,aAAT,CACAlH,KAAKlC,MAAQiG,KAAKiD,KAAM,IAAMhH,KAAK+G,UAAY,KAAQL,GACvD1G,KAAKiH,MAAQ,GAEb,IAAK,IAAIjE,EAAI,EAAGA,EAAIhD,KAAK+G,UAAW/D,IAClChD,KAAKiH,MAAM1D,KAAKqD,EAAsB,GAAI,MAG5C5G,KAAKe,SAAS,CAAE+F,SAAgC,EAAtB9G,KAAKD,MAAM+G,UAAgB9G,KAAKoH,a,wCAI1D,IAAK,IAAIpE,EAAI,EAAGA,EAAIhD,KAAK+G,UAAW/D,IAClChD,KAAK,WAAL,OAAgBgD,IAAKb,aAAaE,EAAcC,W,gCAI1C+E,EAAWC,GAAQ,IAAD,OAC1B,IAAItH,KAAKkH,aAAT,CACAlH,KAAKkH,cAAe,EACpBlH,KAAKuH,kBAIHD,EADEtH,KAAK+G,WAAa,GACsB,GAAlChD,KAAKC,MAAM,GAAKhE,KAAK+G,WAAkBO,EACpCvD,KAAKC,MAAwC,EAAlCD,KAAKC,MAAM,GAAKhE,KAAK+G,YAAkBO,EAC/D,IAAIhE,EAAa,GACjB,OAAQ+D,GACN,IAAK,cACH/D,EDrFD,SAAoBP,GAKzB,IAJA,IAAMuC,EAAIvC,EAAIoB,OACVb,EAAa,GAGRN,EAAI,EAAGA,EAAIsC,EAAGtC,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIqC,EAAItC,EAAI,EAAGC,IAE7BK,EAAWC,KAAK,CAACN,EAAGA,EAAI,IACxBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,IACxBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,IACpBF,EAAIE,GAAKF,EAAIE,EAAI,IAEnBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,EAAGF,EAAIE,GAAIF,EAAIE,EAAI,GAAIA,EAAI,IAAMqC,EAAItC,EAAI,IACjEF,EAAKC,EAAKE,EAAGA,EAAI,IAEjBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,EAAGF,EAAIE,EAAI,GAAIF,EAAIE,GAAIA,EAAI,IAAMqC,EAAItC,EAAI,IAWvE,OALAM,EAAWC,KAAK,CAAC,EAAG,IACpBD,EAAWC,KAAK,CAAC,EAAG,IACpBD,EAAWC,KAAK,CAAC,EAAG,IACpBD,EAAWC,KAAK,CAAC,EAAG,EAAGR,EAAI,GAAIA,EAAI,IAAI,IAEhCO,EC0DYkE,CAAWxH,KAAKiH,OAC7BjH,KAAKyH,qBAAqBnE,EAAYgE,GACtC,MACF,IAAK,iBACHhE,EDJD,SAAuBP,GAC5B,IACIO,EAAa,GAGjB,OADAH,EAAoBJ,EAAK,EAHfA,EAAIoB,OAGkB,EAAGb,GAC5BA,ECDYoE,CAAc1H,KAAKiH,OAChCjH,KAAK2H,wBAAwBrE,EAAYgE,GACzC,MACF,IAAK,iBACHhE,EDCD,SAAuBP,GAI5B,IAHA,IAAIO,EAAa,GACXgC,EAAIvC,EAAIoB,OAELnB,EAAI,EAAGA,EAAIsC,EAAI,EAAGtC,IAAK,CAE9BM,EAAWC,KAAKP,GAChBM,EAAWC,KAAKP,GAChBM,EAAWC,KAAKP,GAGhBM,EAAWC,KAAK,CAACP,EAAGA,EAAGD,EAAIC,GAAID,EAAIC,IAAI,IAIvC,IADA,IAAI4E,EAAS5E,EACJC,EAAID,EAAI,EAAGC,EAAIqC,EAAGrC,IACrBF,EAAIE,GAAKF,EAAI6E,KAASA,EAAS3E,GAEnCK,EAAWC,KAAKN,GAChBK,EAAWC,KAAKN,GAChBK,EAAWC,KAAKN,GAGhBK,EAAWC,KAAK,CAACN,EAAGA,EAAGF,EAAIE,GAAIF,EAAIE,IAAI,IAGzCK,EAAWC,KAAK,CAACP,IACjBM,EAAWC,KAAK,CAACP,IACjBM,EAAWC,KAAK,CAACP,IAGjBM,EAAWC,KAAK,CAACqE,EAAQ5E,EAAGD,EAAI6E,GAAS7E,EAAIC,IAAI,IAEjDF,EAAKC,EAAKC,EAAG4E,GAYf,OAPAtE,EAAWC,KAAK,CAAC+B,EAAI,IACrBhC,EAAWC,KAAK,CAAC+B,EAAI,IACrBhC,EAAWC,KAAK,CAAC+B,EAAI,IAGrBhC,EAAWC,KAAK,CAAC+B,EAAI,EAAGA,EAAI,EAAGvC,EAAIuC,EAAI,GAAIvC,EAAIuC,EAAI,IAAI,IAEhDhC,EC9CYuE,CAAc7H,KAAKiH,OAChCjH,KAAK8H,wBAAwBxE,EAAYgE,GACzC,MACF,IAAK,uBACHhE,ED8CD,SAA4BP,GACjC,IAGIgF,EAHAzE,EAAa,GACXgC,EAAIvC,EAAIoB,OAGd,EAAG,CACD4D,GAAU,EAEV,IAAK,IAAI/E,EAAI,EAAGA,EAAIsC,EAAI,EAAGtC,IAEzBM,EAAWC,KAAK,CAACP,EAAGA,EAAI,IACxBM,EAAWC,KAAK,CAACP,EAAGA,EAAI,IACxBM,EAAWC,KAAK,CAACP,EAAGA,EAAI,IAGpBD,EAAIC,GAAKD,EAAIC,EAAI,IACnBM,EAAWC,KAAK,CAACP,EAAGA,EAAI,EAAGD,EAAIC,GAAID,EAAIC,EAAI,IAAI,IAC/CF,EAAKC,EAAKC,EAAGA,EAAI,GACjB+E,GAAU,GAEVzE,EAAWC,KAAK,CAACP,EAAGA,EAAI,EAAGD,EAAIC,EAAI,GAAID,EAAIC,IAAI,IAGnD,IAAK+E,EAAS,MAEdA,GAAU,EAEV,IAAK,IAAI/E,EAAIsC,EAAI,EAAGtC,GAAK,EAAGA,IAE1BM,EAAWC,KAAK,CAACP,EAAI,EAAGA,IACxBM,EAAWC,KAAK,CAACP,EAAI,EAAGA,IACxBM,EAAWC,KAAK,CAACP,EAAI,EAAGA,IAGpBD,EAAIC,GAAKD,EAAIC,EAAI,IACnBM,EAAWC,KAAK,CAACP,EAAGA,EAAI,EAAGD,EAAIC,GAAID,EAAIC,EAAI,IAAI,IAC/CF,EAAKC,EAAKC,EAAGA,EAAI,GACjB+E,GAAU,GAEVzE,EAAWC,KAAK,CAACP,EAAGA,EAAI,EAAGD,EAAIC,EAAI,GAAID,EAAIC,IAAI,UAG5C+E,GAGT,IAAK,IAAI/E,EAAI,EAAGA,EAAIsC,EAAGtC,IACrBM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGA,EAAGD,EAAIC,GAAID,EAAIC,IAAI,IAGzC,OAAOM,EClGY0E,CAAmBhI,KAAKiH,OACrCjH,KAAKiI,6BAA6B3E,EAAYgE,GAC9C,MACF,IAAK,aACHhE,EDkGD,SAAmBP,GAKxB,IAJA,IAAIO,EAAa,GACXgC,EAAIvC,EAAIoB,OAEV+D,EAAM,EACHA,EAAM5C,GAEXhC,EAAWC,KAAK2E,GAChB5E,EAAWC,KAAK2E,GAChB5E,EAAWC,KAAK2E,GACJ,IAARA,GAAanF,EAAImF,IAAQnF,EAAImF,EAAM,IACrC5E,EAAWC,KAAK,CAAC2E,EAAKA,EAAKnF,EAAImF,GAAMnF,EAAImF,IAAM,IAC/CA,MAEA5E,EAAWC,KAAK,CAAC2E,EAAM,EAAGA,EAAKnF,EAAImF,EAAM,GAAInF,EAAImF,IAAM,IACvDpF,EAAKC,EAAKmF,EAAKA,EAAM,GACrBA,KAKJ,IAAK,IAAIlF,EAAIsC,EAAI,EAAGtC,GAAK,EAAGA,IAC1BM,EAAWC,KAAKP,GAChBM,EAAWC,KAAKP,GAChBM,EAAWC,KAAKP,GAChBM,EAAWC,KAAK,CAACP,EAAGA,EAAGD,EAAIC,GAAID,EAAIC,IAAI,IAGzC,OAAOM,EC9HY6E,CAAUnI,KAAKiH,OAC5BjH,KAAKoI,oBAAoB9E,EAAYgE,GACrC,MACF,IAAK,eACHhE,EDgLD,SAAqBP,GAC1B,IAAIO,EAAa,GAEjB,OADAO,EAAkBd,EAAK,EAAGA,EAAIoB,QAAQ,EAAMb,GACrCA,ECnLY+E,CAAYrI,KAAKiH,OAC9BjH,KAAKsI,sBAAsBhF,EAAYgE,GACvC,MACF,IAAK,aACHhE,EDyLD,SAAmBP,GACxB,IAAIO,EAAa,GACXgC,EAAIvC,EAAIoB,OACRoE,EATR,SAAsBjD,GAEpB,IADA,IAAIiD,EAAO,CAAC,IAAK,GAAI,GAAI,EAAG,EAAG,GACxBA,EAAK,GAAKjD,EAAGiD,EAAKC,SACzB,OAAOD,EAMME,CAAanD,GAHG,uBAM7B,YAAgBiD,EAAhB,+CACE,IADqB,IAAdG,EAAa,QACX1F,EAAI0F,EAAK1F,EAAIsC,EAAGtC,IAAK,CAE5B,IAAIC,OAAC,EACDC,EAAOH,EAAIC,GAEf,IAAKC,EAAID,EAAGC,GAAKyF,GAAO3F,EAAIE,EAAIyF,GAAOxF,EAAMD,GAAKyF,EAEhDpF,EAAWC,KAAKN,GAChBK,EAAWC,KAAKN,GAChBK,EAAWC,KAAKN,GAGhBK,EAAWC,KAAK,CAACN,EAAGF,EAAIE,EAAIyF,GAAc,IAARA,GAAa1F,IAAMsC,EAAI,IACzDvC,EAAIE,GAAKF,EAAIE,EAAIyF,GAanB,GATApF,EAAWC,KAAKN,GAChBK,EAAWC,KAAKN,GAChBK,EAAWC,KAAKN,GAGhBK,EAAWC,KAAK,CAACN,EAAGC,EAAc,IAARwF,GAAa1F,IAAMsC,EAAI,IACjDvC,EAAIE,GAAKC,EAGG,IAARwF,GAAa1F,IAAMsC,EAAI,EACzB,IAAK,IAAI9B,EAAIP,EAAI,EAAGO,GAAK,EAAGA,IAE1BF,EAAWC,KAAKC,GAChBF,EAAWC,KAAKC,GAChBF,EAAWC,KAAKC,GAGhBF,EAAWC,KAAK,CAACC,EAAGT,EAAIS,GAAY,IAARkF,GAAa1F,IAAMsC,EAAI,KAzC9B,kFA+C7B,OAAOhC,ECxOYqF,CAAU3I,KAAKiH,OAC5BjH,KAAK4I,oBAAoBtF,EAAYgE,GACrC,MACF,IAAK,aACHhE,EDqRD,SAAmBP,GACxB,IAAIO,EAAa,GAEjB,OADAc,EAAgBrB,EAAK,EAAGA,EAAIoB,OAAS,EAAGb,GACjCA,ECxRYuF,CAAU7I,KAAKiH,OAC5BjH,KAAK8I,oBAAoBxF,EAAYgE,GACrC,MACF,IAAK,aACHhE,EDkWD,SAAmBP,GACxB,IAAIO,EAAa,GAEjB,OADAqB,EAAgB5B,EAAK,EAAGA,EAAIoB,OAAS,EAAGb,GACjCA,ECrWYyF,CAAU/I,KAAKiH,OAC5BjH,KAAKgJ,oBAAoB1F,EAAYgE,GACrC,MACF,IAAK,YACHhE,ED8XD,SAAkBP,GAKvB,IAJA,IAAMuC,EAAIvC,EAAIoB,OACVb,EAAa,GAGRN,EAAIe,KAAKC,MAAMsB,EAAI,GAAK,EAAGtC,GAAK,EAAGA,IAC1CqC,EAAQtC,EAAKuC,EAAGtC,EAAGM,GAGrB,IAAK,IAAIN,EAAIsC,EAAI,EAAGtC,GAAK,EAAGA,IAE1BM,EAAWC,KAAK,CAAC,EAAGP,IACpBM,EAAWC,KAAK,CAAC,EAAGP,IACpBM,EAAWC,KAAK,CAAC,EAAGP,IACpBM,EAAWC,KAAK,CAAC,EAAGP,EAAGD,EAAI,GAAIA,EAAIC,IAAI,IACvCF,EAAKC,EAAK,EAAGC,GAGbqC,EAAQtC,EAAKC,EAAG,EAAGM,GAGrB,OAAOA,ECnZY2F,CAASjJ,KAAKiH,OAC3BjH,KAAKkJ,mBAAmB5F,EAAYgE,GACpC,MACF,IAAK,mBAEHhE,ED6cD,SAAsBP,EAAK4C,GAOhC,IANA,IAAIrC,EAAa,GACXgC,EAAIvC,EAAIoB,OAGVoC,EAAWxD,EAAI,GACf0C,EAAW1C,EAAI,GACVC,EAAI,EAAGA,EAAID,EAAIoB,OAAQnB,IAC9BuD,EAAWxC,KAAK1D,IAAIkG,EAAUxD,EAAIC,IAClCyC,EAAW1B,KAAK3D,IAAIqF,EAAU1C,EAAIC,IAIpC,IAAK,IAAI0C,EAAM,GAAIa,EAAWd,GAAYC,GAAO,EAAGA,GAAOC,EACzDH,EAAUzC,EAAKuC,EAAGG,EAAUC,EAAKC,EAAOrC,GAG1C,IAAK,IAAIN,EAAI,EAAGA,EAAIsC,EAAGtC,IACrBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,IAG9B,OAAOM,ECreY6F,CAAanJ,KAAKiH,MADjB,GAEdjH,KAAKoJ,uBAAuB9F,EAAYgE,GACxC,MACF,IAAK,mBACHhE,EAAa8C,EAAapG,KAAKiH,MAAO,GACtCjH,KAAKqJ,uBAAuB/F,EAAYgE,GACxC,MACF,IAAK,cACH,IAAMgC,EAAavF,KAAKC,MAAwB,GAAjBhE,KAAK+G,UAAkB,KAAO,EAC7DzD,ED+lBD,SAAoBP,EAAKuG,GAC9B,IAAIhG,EAAa,GACXgC,EAAIvC,EAAIoB,OACV4B,EAAe,GACfwD,EAAS,IAAIvE,MAAMM,GACnBO,EAAU,IAAIb,MAAMsE,GACxBC,EAAOzD,KAAK,GACZD,EAAQC,KAAK,GAIb,IADA,IAAIS,EAAWxD,EAAI,GACVC,EAAI,EAAGA,EAAIsC,EAAGtC,IAAKuD,EAAWxC,KAAK1D,IAAIkG,EAAUxD,EAAIC,IAE9D,IAAK,IAAIA,EAAI,EAAGA,EAAIsC,EAAGtC,IAAK,CAC1B,IAAMgD,EACJjD,EAAIC,KAAOuD,EACP+C,EAAa,EACbvF,KAAKC,MAAOjB,EAAIC,GAAKsG,EAAc/C,GAEzCjD,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,KACxB6C,EAAQG,KAIV,IAAK,IAAIhD,EAAI,EAAGA,EAAIsG,EAAYtG,IAAK6C,EAAQ7C,IAAM6C,EAAQ7C,EAAI,GAI/D,IAHA,IAAMyD,EAAI,UAAOZ,GAGjB,MAAcA,EAAd,gBAAK,IAAI7C,EAAC,KAAa+C,EAAaxC,KAAKP,EAAI,GAM7C,IAHA,IAAIiD,EAAc,GAGTjD,EAAIsC,EAAI,EAAGtC,GAAK,EAAGA,IAAK,CAC/B,IAAMgD,EACJjD,EAAIC,KAAOuD,EACP+C,EAAa,EACbvF,KAAKC,MAAOjB,EAAIC,GAAKsG,EAAc/C,GACrCR,EAAaG,SAASL,EAAQG,GAAa,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAGjD,EAAIC,IAAI,GAAO,IAC5DiD,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,MAE7CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAG,IAC1CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAG,IAC1CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAG,IAC1CC,EAAY1C,KAAK,CAACsC,EAAQG,GAAa,EAAGjD,EAAIC,IAAI,GAAO,KAE3DuG,IAAS1D,EAAQG,IAAcjD,EAAIC,GAGrC,cAAsBiD,EAAtB,gBAAK,IAAI7D,EAAS,KAAiBkB,EAAWC,KAAKnB,GAGnD,IAAK,IAAIY,EAAI,EAAGA,EAAIsC,EAAGtC,IAAKD,EAAIC,GAAKuG,EAAOvG,GAG5C,IAAK,IAAIA,GAAK,EAAGA,EAAIsG,EAAa,EAAGtG,IAAK,CAGxCG,EAAoBJ,GAFL,IAAPC,EAAW,EAAIyD,EAAKzD,GACpByD,EAAKzD,EAAI,GAAK,EACSM,GAGjC,OAAOA,ECnqBYkG,CAAWxJ,KAAKiH,MAAOqC,GACpCtJ,KAAKyJ,qBAAqBnG,EAAYgE,GAO1CoC,YAAW,WACT,EAAKxC,cAAe,EACpB,EAAK1I,MAAMmL,wBACV,IAAMrG,EAAWa,OAASmD,M,2CAGVhE,EAAYgE,GAC/B,IADuC,IAAD,OAC7BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb4G,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObpG,EAPa,KASf+F,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa1H,WAAW6H,EAAa,EAAKjM,OAC1D,EAAK,WAAD,OAAY+L,IAAa3H,WAAW4H,EAAa,EAAKhM,OACtD6F,GACF,EAAK,WAAD,OAAYkG,IAAa1H,aAAaE,EAAcM,UACzD,IAAMK,EAAIsE,GAdG,GAeV,WAAD,kBAE0BhE,EAAWN,GAFrC,GAEE4G,EAFF,KAEaC,EAFb,KAGC1L,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYE,IAAazH,aAAahE,GAC1C,EAAK,WAAD,OAAY0L,IAAa1H,aAAahE,KACzC,IAAM6E,EAAIsE,GAZP,K,8CAiBYhE,EAAYgE,GAClC,IAD0C,IAAD,OAChCtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEsBM,EAAWN,GAFjC,GAERgH,EAFQ,KAEAtJ,EAFA,KAEUiD,EAFV,KAGf+F,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU9H,WAAWxB,EAAU,EAAK5C,OAChD6F,GACF,EAAK,WAAD,OAAYqG,IAAU7H,aAAaE,EAAcM,UACtD,IAAMK,EAAIsE,GAPG,GAQV,WAAD,IAEE0C,EAFF,YAEY1G,EAAWN,GAFvB,MAGC7E,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU7H,aAAahE,KACtC,IAAM6E,EAAIsE,GAXP,K,8CAgBYhE,EAAYgE,GAClC,IAD0C,IAAD,OAChCtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb4G,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObpG,EAPa,KASf+F,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa1H,WAAW6H,EAAa,EAAKjM,OAC1D,EAAK,WAAD,OAAY+L,IAAa3H,WAAW4H,EAAa,EAAKhM,OACtD6F,GACF,EAAK,WAAD,OAAYkG,IAAa1H,aAAaE,EAAcM,UACzD,IAAMK,EAAIsE,GAdG,GAeV,WAEN,IAAM0C,EAAS1G,EAAWN,GACpB7E,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU7H,aAAahE,KACtC,IAAM6E,EAAIsE,GAXP,K,mDAgBiBhE,EAAYgE,GACvC,IAD+C,IAAD,OACrCtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb4G,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObpG,EAPa,KASf+F,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa1H,WAAW6H,EAAa,EAAKjM,OAC1D,EAAK,WAAD,OAAY+L,IAAa3H,WAAW4H,EAAa,EAAKhM,OACtD6F,GACF,EAAK,WAAD,OAAYkG,IAAa1H,aAAaE,EAAcM,UACzD,IAAMK,EAAIsE,GAdG,GAeV,WAAD,kBAE0BhE,EAAWN,GAFrC,GAEE4G,EAFF,KAEaC,EAFb,KAGC1L,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYE,IAAazH,aAAahE,GAC1C,EAAK,WAAD,OAAY0L,IAAa1H,aAAahE,KACzC,IAAM6E,EAAIsE,GAZP,K,0CAiBQhE,EAAYgE,GAC9B,IADsC,IAAD,OAC5BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb4G,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObpG,EAPa,KASf+F,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa1H,WAAW6H,EAAa,EAAKjM,OAC1D,EAAK,WAAD,OAAY+L,IAAa3H,WAAW4H,EAAa,EAAKhM,OACtD6F,GACF,EAAK,WAAD,OAAYkG,IAAa1H,aAAaE,EAAcM,UACzD,IAAMK,EAAIsE,GAdG,GAeV,WAEN,IAAM0C,EAAS1G,EAAWN,GACpB7E,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU7H,aAAahE,KACtC,IAAM6E,EAAIsE,GAXP,K,4CAgBUhE,EAAYgE,GAChC,IADwC,IAAD,OAC9BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb4G,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObpG,EAPa,KASf+F,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa1H,WAAW6H,EAAa,EAAKjM,OAC1D,EAAK,WAAD,OAAY+L,IAAa3H,WAAW4H,EAAa,EAAKhM,OACtD6F,IACF,EAAK,WAAD,OAAYiG,IAAazH,aAAaE,EAAcM,QACxD,EAAK,WAAD,OAAYkH,IAAa1H,aAAaE,EAAcM,WAEzD,IAAMK,EAAIsE,GAhBG,GAiBV,WAAD,kBAE0BhE,EAAWN,GAFrC,GAEE4G,EAFF,KAEaC,EAFb,KAGC1L,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYE,IAAazH,aAAahE,GAC1C,EAAK,WAAD,OAAY0L,IAAa1H,aAAahE,KACzC,IAAM6E,EAAIsE,GAZP,K,0CAiBQhE,EAAYgE,GAC9B,IADsC,IAAD,OAC5BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEsBM,EAAWN,GAFjC,GAERgH,EAFQ,KAEAtJ,EAFA,KAEUiD,EAFV,KAGf+F,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU9H,WAAWxB,EAAU,EAAK5C,OAChD6F,GACF,EAAK,WAAD,OAAYqG,IAAU7H,aAAaE,EAAcM,UACtD,IAAMK,EAAIsE,GAPG,GAQV,WAEN,IAAM0C,EAAS1G,EAAWN,GACpB7E,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU7H,aAAahE,KACtC,IAAM6E,EAAIsE,GAXP,K,0CAgBQhE,EAAYgE,GAC9B,IADsC,IAAD,OAC5BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb4G,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObE,EAPa,KASfP,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa1H,WAAW6H,EAAa,EAAKjM,OAC1D,EAAK,WAAD,OAAY+L,IAAa3H,WAAW4H,EAAa,EAAKhM,OAC1C,IAAZmM,EACF,EAAK,WAAD,OAAYJ,IAAa1H,aAAaE,EAAcM,QACnC,IAAZsH,GACT,EAAK,WAAD,OAAYL,IAAazH,aAAaE,EAAcK,UAEzD,IAAMM,EAAIsE,GAjBG,GAkBV,WAAD,kBAE0BhE,EAAWN,GAFrC,GAEE4G,EAFF,KAEaC,EAFb,KAGC1L,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYE,IAAazH,aAAahE,GAC1C,EAAK,WAAD,OAAY0L,IAAa1H,aAAahE,KACzC,IAAM6E,EAAIsE,GAZP,K,0CAiBQhE,EAAYgE,GAC9B,IADsC,IAAD,kBAC5BtE,GACP,GAAIA,EAAI,IAAM,EAAG,mBAEsBM,EAAWN,GAFjC,GAERgH,EAFQ,KAEAtJ,EAFA,KAEUiD,EAFV,KAGf+F,YAAW,WAET,GADA,EAAK,WAAD,OAAYM,IAAU9H,WAAWxB,EAAU,EAAK5C,OAChD6F,EAAU,CACZ,IAAIuG,EAAM5G,EAAWN,GAAG,GACxB,EAAK,WAAD,OAAYkH,IAAO/H,aAAaE,EAAcM,WAEnD,IAAMK,EAAIsE,OACR,mBAE0BhE,EAAWN,GAFrC,GAEE4G,EAFF,KAEaC,EAFb,KAGC1L,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYE,IAAazH,aAAahE,GAC1C,EAAK,WAAD,OAAY0L,IAAa1H,aAAahE,KACzC,IAAM6E,EAAIsE,KAvBRtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IAAM,EAApCA,K,yCA4BQM,EAAYgE,GAC7B,IADqC,IAAD,OAC3BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb4G,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObpG,EAPa,KASf+F,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa1H,WAAW6H,EAAa,EAAKjM,OAC1D,EAAK,WAAD,OAAY+L,IAAa3H,WAAW4H,EAAa,EAAKhM,OACtD6F,GACF,EAAK,WAAD,OAAYkG,IAAa1H,aAAaE,EAAcM,UACzD,IAAMK,EAAIsE,GAdG,GAeV,WAAD,kBAE0BhE,EAAWN,GAFrC,GAEE4G,EAFF,KAEaC,EAFb,KAGC1L,EACJ6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACpBoH,YAAW,WACT,EAAK,WAAD,OAAYE,IAAazH,aAAahE,GAC1C,EAAK,WAAD,OAAY0L,IAAa1H,aAAahE,KACzC,IAAM6E,EAAIsE,GAZP,K,6CAiBWhE,EAAYgE,GACjC,IADyC,IAAD,OAC/BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEsBM,EAAWN,GAFjC,GAERgH,EAFQ,KAEAtJ,EAFA,KAEUyJ,EAFV,KAGfT,YAAW,WACLS,GACF,EAAK,WAAD,OAAYH,IAAU7H,aAAaE,EAAcK,QACvD,EAAK,WAAD,OAAYsH,IAAU9H,WAAWxB,EAAU,EAAK5C,SACnD,IAAMkF,EAAIsE,GAPG,GAQV,WAAD,kBAEyBhE,EAAWN,GAFpC,GAEEgH,EAFF,KAEUI,EAFV,KAGDjM,EACF6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACA,IAAhB8H,EAAmBjM,EAAQkE,EAAcC,QACpB,IAAhB8H,IAAmBjM,EAAQkE,EAAcM,QAClD+G,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU7H,aAAahE,KACtC,IAAM6E,EAAIsE,GAbP,K,6CAkBWhE,EAAYgE,GACjC,IADyC,IAAD,OAC/BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEsBM,EAAWN,GAFjC,GAERgH,EAFQ,KAEAtJ,EAFA,KAEUyJ,EAFV,KAGfT,YAAW,WACLS,GACF,EAAK,WAAD,OAAYH,IAAU7H,aAAaE,EAAcK,QACvD,EAAK,WAAD,OAAYsH,IAAU9H,WAAWxB,EAAU,EAAK5C,SACnD,IAAMkF,EAAIsE,GAPG,GAQV,WAAD,kBAEyBhE,EAAWN,GAFpC,GAEEgH,EAFF,KAEUI,EAFV,KAGDjM,EACF6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACA,IAAhB8H,EAAmBjM,EAAQkE,EAAcC,QACpB,IAAhB8H,EAAmBjM,EAAQkE,EAAcM,OACzB,IAAhByH,IAAmBjM,EAAQkE,EAAcO,MAClD8G,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU7H,aAAahE,KACtC,IAAM6E,EAAIsE,GAdP,K,2CAmBShE,EAAYgE,GAC/B,IADuC,IAAD,OAC7BtE,EAAI,EAAGA,EAAIM,EAAWa,OAAQnB,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEgCM,EAAWN,GAF3C,GAERgH,EAFQ,KAEAtJ,EAFA,KAEUiD,EAFV,KAEoBwG,EAFpB,KAGfT,YAAW,WACLS,GACF,EAAK,WAAD,OAAYH,IAAU7H,aAAaE,EAAcK,QACnDiB,GACF,EAAK,WAAD,OAAYqG,IAAU7H,aAAaE,EAAcM,QACvD,EAAK,WAAD,OAAYqH,IAAU9H,WAAWxB,EAAU,EAAK5C,SACnD,IAAMkF,EAAIsE,GATG,GAUV,WAAD,kBAEyBhE,EAAWN,GAFpC,GAEEgH,EAFF,KAEUI,EAFV,KAGDjM,EACF6E,EAAI,IAAM,EACNX,EAAcG,IACdQ,EAAI,IAAM,EACVX,EAAcI,KACdJ,EAAcC,QACA,IAAhB8H,EAAmBjM,EAAQkE,EAAcC,QACpB,IAAhB8H,IAAmBjM,EAAQkE,EAAcM,QAClD+G,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU7H,aAAahE,KACtC,IAAM6E,EAAIsE,GAbP,K,+BAkBF,IAAD,OACP,OACE,yBAAK3I,UAAU,mBACZqB,KAAKiH,MAAMvF,KAAI,SAAC9C,EAAOsL,GACtB,OACE,kBAAC,EAAD,CACEtI,IAAKsI,EACLtL,MAAOA,EACPd,MAAO,EAAKA,MACZmC,MAAO,SAAAoK,GAAG,OAAK,EAAK,WAAD,OAAYH,IAASG,QAK9C,yBACE1L,UAAU,YACViD,IAAK,QACLiB,MAAO,CACL9E,OAAO,GAAD,OAAQ,IAAM+D,EAAU,IAAO,IAAO,IAAtC,c,GA5iBKnB,aCnBjB2J,EAAa,CACjB,cACA,iBACA,iBACA,uBACA,aACA,eACA,aACA,aACA,aACA,YACA,mBACA,mBACA,eAGIC,EAAS,CAAC,OAAQ,SAAU,QAiGnBC,E,YA9Fb,aAAe,IAAD,8BACZ,+CAKFC,sBAAwB,SAAApD,GACtB,EAAKqD,aAAerD,GAPR,EAUdsD,kBAAoB,SAAAC,GAClB,EAAKC,SAAWD,GAXJ,EAcdE,qBAAuB,WACrB,EAAKC,SAASC,uBAfF,EAkBdC,sBAAwB,SAACxK,EAAOC,GAC1BA,IAAa,EAAKqK,SAAShE,WAAc,EAAKgE,SAAS7D,eACzD,EAAK6D,SAAShE,UAAYrG,EAC1B,EAAKqK,SAASC,wBArBJ,EAyBdE,gBAAkB,WAChB,IAAI5D,EAAQ,EACZ,OAAQ,EAAKuD,UACX,IAAK,OACHvD,EAAQ,EACR,MACF,IAAK,SACHA,EAAQ,EACR,MACF,IAAK,OACHA,EAAQ,EACR,MACF,QACEA,EAAQ,EAGP,EAAKyD,SAAS7D,cAAc,EAAKiE,OAAOpK,SAAS,CAAExB,UAAU,IAClE,EAAKwL,SAASK,UAAU,EAAKV,aAAcpD,IA1C/B,EA6Cd+D,0BAA4B,WAC1B,EAAKF,OAAOpK,SAAS,CAAExB,UAAU,KA5CjC,EAAKmL,aAAe,cACpB,EAAKG,SAAW,OAHJ,E,sEAiDJ,IAAD,OACP,OACE,yBAAKlM,UAAU,QACb,kBAAC2M,EAAA,EAAD,CAAQC,QAAQ,UACd,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,sBACA,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CACEnN,KAAM,YACN2C,KAAM,SACNG,QAASrB,KAAKkL,kBAEhB,kBAAC,EAAD,CACE3M,KAAM,kBACN2C,KAAM,SACNG,QAASrB,KAAK8K,uBAEhB,kBAAC,EAAD,CACEtK,SAAUR,KAAKiL,sBACfhL,MAAO,SAAAoK,GAAG,OAAK,EAAKc,OAASd,KAE/B,kBAAC,EAAD,CACE9L,KAAM,aACN2C,KAAM,WACNO,SAAU6I,EACVtJ,QAAShB,KAAK0K,aACdzJ,aAAcjB,KAAKyK,wBAErB,kBAAC,EAAD,CACElM,KAAM,QACN2C,KAAM,WACNO,SAAU8I,EACVvJ,QAAShB,KAAK6K,SACd5J,aAAcjB,KAAK2K,sBAIzB,kBAAC,EAAD,CACEhB,oBAAqB3J,KAAKqL,0BAC1BpL,MAAO,SAAAoK,GAAG,OAAK,EAAKU,SAAWV,U,GAxFT1J,a,YCbjBgL,MARf,WACE,OACE,yBAAKhN,UAAU,OACb,kBAAC,EAAD,QCIciN,QACW,cAA7B7J,OAAO8J,SAASC,UAEe,UAA7B/J,OAAO8J,SAASC,UAEhB/J,OAAO8J,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a11bb6e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  thumb: {\r\n    \"&$open\": {\r\n      \"& $offset\": {\r\n        transform: \"scale(1) translateY(-10px)\"\r\n      }\r\n    }\r\n  },\r\n  open: {},\r\n  offset: {\r\n    zIndex: 1,\r\n    ...theme.typography.body2,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    lineHeight: 1.2,\r\n    transition: theme.transitions.create([\"transform\"], {\r\n      duration: theme.transitions.duration.shortest\r\n    }),\r\n    top: -34,\r\n    left: \"calc(-50% + -4px)\",\r\n    transformOrigin: \"bottom center\",\r\n    transform: \"scale(0)\",\r\n    position: \"absolute\"\r\n  },\r\n  circle: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: 24,\r\n    height: 24,\r\n    borderRadius: \"50% 50% 50% 0\",\r\n    backgroundColor: \"currentColor\",\r\n    transform: \"rotate(-45deg)\"\r\n  },\r\n  label: {\r\n    color: theme.palette.primary.contrastText,\r\n    transform: \"rotate(45deg)\"\r\n  }\r\n});\r\n\r\nfunction ValueLabel(props) {\r\n  const {\r\n    children,\r\n    classes,\r\n    className,\r\n    open,\r\n    value,\r\n    valueLabelDisplay\r\n  } = props;\r\n\r\n  if (valueLabelDisplay === \"off\") {\r\n    return children;\r\n  }\r\n\r\n  return React.cloneElement(\r\n    children,\r\n    {\r\n      className: clsx(\r\n        children.props.className,\r\n        {\r\n          [classes.open]: open || valueLabelDisplay === \"on\"\r\n        },\r\n        classes.thumb\r\n      )\r\n    },\r\n    <span className={clsx(classes.offset, className)}>\r\n      <span className={classes.circle}>\r\n        <span className={classes.label}>{value}</span>\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles, { name: \"PrivateValueLabel\" })(ValueLabel);\r\n","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport ValueLabel from \"./ValueLabel\";\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: \"rgb(76, 187, 159)\",\r\n    height: 8,\r\n    width: 160,\r\n    marginTop: 2,\r\n    marginRight: 11,\r\n    marginLeft: 5\r\n  },\r\n  active: {},\r\n  disabled: {},\r\n  thumb: {\r\n    height: 20,\r\n    width: 20,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid currentColor\",\r\n    marginTop: -6,\r\n    marginLeft: -7,\r\n    \"&$disabled\": {\r\n      width: 20,\r\n      height: 20,\r\n      backgroundColor: \"rgb(252, 4, 4)\",\r\n      marginTop: -6,\r\n      marginLeft: -7,\r\n      \"&:hover\": {\r\n        boxShadow: \"none\"\r\n      }\r\n    },\r\n    \"&:focus,&:hover,&$active\": {\r\n      boxShadow: \"inherit\"\r\n    }\r\n  },\r\n  valueLabel: {\r\n    left: \"calc(-50% + 4px)\",\r\n    top: \"-26px\"\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4\r\n  }\r\n})(Slider);\r\n\r\nclass MySlider extends Component {\r\n  state = { disabled: false };\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PrettoSlider\r\n        valueLabelDisplay=\"auto\"\r\n        defaultValue={75}\r\n        min={8}\r\n        max={150}\r\n        disabled={this.state.disabled}\r\n        // ValueLabelComponent={ValueLabelComponent}\r\n        ValueLabelComponent={ValueLabel}\r\n        onChange={(event, newValue) => this.props.onChange(event, newValue)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default MySlider;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navitem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: props.name, type: props.type, curItem: props.curItem };\r\n  }\r\n\r\n  handleChangeItem = item => {\r\n    this.setState({ curItem: item });\r\n    this.props.onChangeItem(item);\r\n  };\r\n\r\n  render() {\r\n    const { type } = this.state;\r\n    if (type === \"button\") {\r\n      return (\r\n        <li>\r\n          <Button id=\"button\" onClick={this.props.onClick}>\r\n            {this.state.name}\r\n          </Button>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li>\r\n          <Dropdown>\r\n            <Dropdown.Toggle id=\"dropdown-toggle\">\r\n              {this.state.name + \" : \" + this.state.curItem + \"  \"}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {this.props.itemList.map(item => {\r\n                return (\r\n                  <Dropdown.Item\r\n                    key={item}\r\n                    onSelect={() => this.handleChangeItem(item)}\r\n                    id=\"dropdown-item\"\r\n                  >\r\n                    {item}\r\n                  </Dropdown.Item>\r\n                );\r\n              })}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Navitem;\r\n","import React, { Component } from \"react\";\r\nimport \"./Arraybar.css\";\r\n\r\nconst HEIGHT = window.innerHeight;\r\n\r\nclass Element extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.value,\r\n      width: props.width,\r\n      animation: animationType.DEFAULT\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  setElement = (value, width) => {\r\n    this.setState({ value, width });\r\n  };\r\n\r\n  setAnimation = animation => {\r\n    this.setState({ animation });\r\n  };\r\n\r\n  render() {\r\n    let { width, value, animation } = this.state;\r\n    let animationname =\r\n      animation === animationType.RED\r\n        ? \"red\"\r\n        : animation === animationType.BLUE\r\n        ? \"blue\"\r\n        : animation === animationType.YELLOW\r\n        ? \"yellow\"\r\n        : animation === animationType.PURPLE\r\n        ? \"purple\"\r\n        : animation === animationType.PINK\r\n        ? \"pink\"\r\n        : \"\";\r\n    return (\r\n      <div\r\n        className={`array-bar ${animationname}`}\r\n        style={{\r\n          width: `${width}px`,\r\n          height: `${(((value * HEIGHT) / 937) * 790) / 250}px`\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Element;\r\n\r\nexport const animationType = {\r\n  DEFAULT: 1,\r\n  RED: 2,\r\n  BLUE: 3,\r\n  YELLOW: 4,\r\n  PURPLE: 5,\r\n  PINK: 6\r\n};\r\n","function swap(arr, i, j) {\r\n  let temp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = temp;\r\n}\r\n\r\n// bubble sort implentation\r\nexport function bubbleSort(arr) {\r\n  const n = arr.length;\r\n  let animations = [];\r\n\r\n  // bubble the maximum to the end\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      // for comparing animation\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (arr[j] > arr[j + 1]) {\r\n        // swap\r\n        animations.push([j, j + 1, arr[j], arr[j + 1], j + 1 === n - i - 1]); // for swapping animation\r\n        swap(arr, j, j + 1);\r\n      } else {\r\n        animations.push([j, j + 1, arr[j + 1], arr[j], j + 1 === n - i - 1]); // not swapping\r\n      }\r\n    }\r\n  }\r\n\r\n  // final animation\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0, arr[0], arr[0], true]);\r\n\r\n  return animations;\r\n}\r\n\r\n// insertion sort implentation\r\nfunction insertionSortHelper(arr, l, r, animations) {\r\n  // only one element\r\n  if (l === r) {\r\n    // for comparing animation\r\n    animations.push([l]);\r\n    animations.push([l]);\r\n    animations.push([l]);\r\n\r\n    // for overwriting animation\r\n    animations.push([l, arr[l], true]);\r\n  }\r\n\r\n  // insert every element\r\n  for (let i = l + 1; i <= r; i++) {\r\n    let j;\r\n    let temp = arr[i];\r\n\r\n    // find the spot to insert in sorted array\r\n    for (j = i; j > l && arr[j - 1] > temp; j--) {\r\n      // for comparing animation\r\n      animations.push([j]);\r\n      animations.push([j]);\r\n      animations.push([j]);\r\n\r\n      // for overwriting animation\r\n      animations.push([j, arr[j - 1], i === r]);\r\n      arr[j] = arr[j - 1];\r\n    }\r\n\r\n    // for comparing animation\r\n    animations.push([j]);\r\n    animations.push([j]);\r\n    animations.push([j]);\r\n\r\n    // for overwriting animation\r\n    animations.push([j, temp, i === r]);\r\n\r\n    arr[j] = temp;\r\n\r\n    // sorted animations\r\n    if (i === r) {\r\n      for (let k = j - 1; k >= l; k--) {\r\n        // for comparing animation\r\n        animations.push([k]);\r\n        animations.push([k]);\r\n        animations.push([k]);\r\n\r\n        // for overwriting animation\r\n        animations.push([k, arr[k], i === r]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function insertionSort(arr) {\r\n  const n = arr.length;\r\n  let animations = [];\r\n\r\n  insertionSortHelper(arr, 0, n - 1, animations);\r\n  return animations;\r\n}\r\n\r\n// selection sort implentation\r\nexport function selectionSort(arr) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n\r\n  for (let i = 0; i < n - 1; i++) {\r\n    // for comparing animation\r\n    animations.push(i);\r\n    animations.push(i);\r\n    animations.push(i);\r\n\r\n    // for overwriting animation\r\n    animations.push([i, i, arr[i], arr[i], false]);\r\n\r\n    // find the minimum element in the unsorted array\r\n    let minIdx = i;\r\n    for (let j = i + 1; j < n; j++) {\r\n      if (arr[j] < arr[minIdx]) minIdx = j;\r\n      // for comparing animation\r\n      animations.push(j);\r\n      animations.push(j);\r\n      animations.push(j);\r\n\r\n      // for overwriting animation\r\n      animations.push([j, j, arr[j], arr[j], false]);\r\n    }\r\n    // for comparing animation\r\n    animations.push([i]);\r\n    animations.push([i]);\r\n    animations.push([i]);\r\n\r\n    // for overwriting animation\r\n    animations.push([minIdx, i, arr[minIdx], arr[i], true]);\r\n    // swap the elements\r\n    swap(arr, i, minIdx);\r\n  }\r\n\r\n  // last element animation\r\n  // for comparing animation\r\n  animations.push([n - 1]);\r\n  animations.push([n - 1]);\r\n  animations.push([n - 1]);\r\n\r\n  // for overwriting animation\r\n  animations.push([n - 1, n - 1, arr[n - 1], arr[n - 1], true]);\r\n\r\n  return animations;\r\n}\r\n\r\n// cocktail shaker sort implementation\r\nexport function cocktailShakerSort(arr) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n\r\n  let swapped;\r\n  do {\r\n    swapped = false;\r\n    // left shake\r\n    for (let i = 0; i < n - 1; i++) {\r\n      // for comparing animation\r\n      animations.push([i, i + 1]);\r\n      animations.push([i, i + 1]);\r\n      animations.push([i, i + 1]);\r\n\r\n      // check if we need to swap\r\n      if (arr[i] > arr[i + 1]) {\r\n        animations.push([i, i + 1, arr[i], arr[i + 1], false]); // for swapping animation\r\n        swap(arr, i, i + 1);\r\n        swapped = true;\r\n      } else {\r\n        animations.push([i, i + 1, arr[i + 1], arr[i], false]); // for swapping animation\r\n      }\r\n    }\r\n    if (!swapped) break; // no swapping means sorted\r\n\r\n    swapped = false;\r\n    // right shake\r\n    for (let i = n - 2; i >= 0; i--) {\r\n      // for comparing animation\r\n      animations.push([i + 1, i]);\r\n      animations.push([i + 1, i]);\r\n      animations.push([i + 1, i]);\r\n\r\n      // check if we need to swap\r\n      if (arr[i] > arr[i + 1]) {\r\n        animations.push([i, i + 1, arr[i], arr[i + 1], false]); // for swapping animation\r\n        swap(arr, i, i + 1);\r\n        swapped = true;\r\n      } else {\r\n        animations.push([i, i + 1, arr[i + 1], arr[i], false]); // for swapping animation\r\n      }\r\n    }\r\n  } while (swapped);\r\n\r\n  // firnish sorted animations\r\n  for (let i = 0; i < n; i++) {\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([i, i]);\r\n    animations.push([i, i, arr[i], arr[i], true]); // for swapping animation\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\n// gnome sort implementation\r\nexport function gnomeSort(arr) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n\r\n  let pos = 0;\r\n  while (pos < n) {\r\n    // for comparing animation\r\n    animations.push(pos);\r\n    animations.push(pos);\r\n    animations.push(pos);\r\n    if (pos === 0 || arr[pos] >= arr[pos - 1]) {\r\n      animations.push([pos, pos, arr[pos], arr[pos], false]); // for swapping animation\r\n      pos++;\r\n    } else {\r\n      animations.push([pos - 1, pos, arr[pos - 1], arr[pos], false]); // for swapping animation\r\n      swap(arr, pos, pos - 1);\r\n      pos--;\r\n    }\r\n  }\r\n\r\n  // firnish sorted animations\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    animations.push(i);\r\n    animations.push(i);\r\n    animations.push(i);\r\n    animations.push([i, i, arr[i], arr[i], true]); // for swapping animation\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\n// bitonic sort implementation\r\nfunction compSwap(arr, i, j, dir, animations, isSorted) {\r\n  // swap in the direction given\r\n  const isGreater = arr[i] > arr[j];\r\n  // comparing animations\r\n  animations.push([i, j]);\r\n  animations.push([i, j]);\r\n  animations.push([i, j]);\r\n  if (dir === isGreater) {\r\n    animations.push([i, j, arr[i], arr[j], isSorted]); // for swapping animation\r\n    swap(arr, i, j);\r\n  } else {\r\n    animations.push([i, j, arr[j], arr[i], isSorted]); // for swapping animation\r\n  }\r\n}\r\n\r\nfunction greatestPowerOfTwoLessThan(cnt) {\r\n  let k = 1;\r\n  while (k > 0 && k < cnt) k = k << 1;\r\n  return k >> 1;\r\n}\r\n\r\nfunction bitonicMerge(arr, l, cnt, dir, animations, isSorted) {\r\n  if (cnt <= 1) return;\r\n\r\n  let k = greatestPowerOfTwoLessThan(cnt);\r\n  for (let i = l; i < l + cnt - k; i++)\r\n    compSwap(arr, i, i + k, dir, animations, isSorted && cnt - k === 1);\r\n\r\n  bitonicMerge(arr, l, k, dir, animations, isSorted);\r\n  bitonicMerge(arr, l + k, cnt - k, dir, animations, isSorted);\r\n  return;\r\n}\r\n\r\nfunction bitonicSortHelper(arr, l, cnt, dir, animations) {\r\n  if (cnt <= 1) return;\r\n\r\n  let k = Math.floor(cnt / 2);\r\n\r\n  // sort in ascending order\r\n  bitonicSortHelper(arr, l, k, !dir, animations);\r\n\r\n  // sort in descending order\r\n  bitonicSortHelper(arr, l + k, cnt - k, dir, animations);\r\n\r\n  // merge sequence in asecending order\r\n  bitonicMerge(arr, l, cnt, dir, animations, cnt === arr.length);\r\n\r\n  return;\r\n}\r\n\r\nexport function bitonicSort(arr) {\r\n  let animations = [];\r\n  bitonicSortHelper(arr, 0, arr.length, true, animations);\r\n  return animations;\r\n}\r\n\r\n// shell sort implentation\r\nfunction sedgewickGap(n) {\r\n  let gaps = [112, 48, 21, 7, 3, 1];\r\n  for (; gaps[0] > n; gaps.shift());\r\n  return gaps;\r\n}\r\n\r\nexport function shellSort(arr) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n  const gaps = sedgewickGap(n);\r\n\r\n  // big gap to small gap\r\n  for (let gap of gaps) {\r\n    for (let i = gap; i < n; i++) {\r\n      // basically same as insertion sort\r\n      let j;\r\n      let temp = arr[i];\r\n\r\n      for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {\r\n        // for comparing animation\r\n        animations.push(j);\r\n        animations.push(j);\r\n        animations.push(j);\r\n\r\n        // for overwriting animation\r\n        animations.push([j, arr[j - gap], gap === 1 && i === n - 1]);\r\n        arr[j] = arr[j - gap];\r\n      }\r\n\r\n      // for comparing animation\r\n      animations.push(j);\r\n      animations.push(j);\r\n      animations.push(j);\r\n\r\n      // for overwriting animation\r\n      animations.push([j, temp, gap === 1 && i === n - 1]);\r\n      arr[j] = temp;\r\n\r\n      // sorted animations\r\n      if (gap === 1 && i === n - 1) {\r\n        for (let k = j - 1; k >= 0; k--) {\r\n          // for comparing animation\r\n          animations.push(k);\r\n          animations.push(k);\r\n          animations.push(k);\r\n\r\n          // for overwriting animation\r\n          animations.push([k, arr[k], gap === 1 && i === n - 1]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\n// quick sort implentation\r\nfunction getRandomPivot(l, r) {\r\n  return l + Math.floor(Math.random() * (r - l + 1));\r\n}\r\n\r\nfunction partition(arr, l, r, pivot, animations) {\r\n  let partitionIdx = l - 1;\r\n  const pivotElement = arr[pivot];\r\n\r\n  animations.push([r, pivot]);\r\n  animations.push([r, pivot]);\r\n  animations.push([r, pivot]);\r\n  animations.push([r, pivot, arr[r], arr[pivot], 2]);\r\n  swap(arr, r, pivot); // swap pivot with right most elemtn;\r\n\r\n  for (let i = l; i < r; i++) {\r\n    animations.push([i, partitionIdx + 1]);\r\n    animations.push([i, partitionIdx + 1]);\r\n    animations.push([i, partitionIdx + 1]);\r\n\r\n    if (arr[i] <= pivotElement) {\r\n      animations.push([i, partitionIdx + 1, arr[i], arr[partitionIdx + 1], 3]);\r\n      swap(arr, i, ++partitionIdx);\r\n    } else {\r\n      animations.push([i, partitionIdx + 1, arr[partitionIdx + 1], arr[i], 3]);\r\n    }\r\n  }\r\n\r\n  animations.push([r, partitionIdx + 1]);\r\n  animations.push([r, partitionIdx + 1]);\r\n  animations.push([r, partitionIdx + 1]);\r\n  animations.push([r, partitionIdx + 1, arr[r], arr[partitionIdx + 1], 1]);\r\n  swap(arr, r, ++partitionIdx); // swap pivot back\r\n  return partitionIdx;\r\n}\r\n\r\nfunction quickSortHelper(arr, l, r, animations) {\r\n  if (l > r) return;\r\n  const pivot = getRandomPivot(l, r);\r\n  const partitionIdx = partition(arr, l, r, pivot, animations);\r\n\r\n  quickSortHelper(arr, partitionIdx + 1, r, animations);\r\n  quickSortHelper(arr, l, partitionIdx - 1, animations);\r\n  return;\r\n}\r\n\r\nexport function quickSort(arr) {\r\n  let animations = [];\r\n  quickSortHelper(arr, 0, arr.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\n// merge sort implentation\r\nfunction merge(arr, l, r, m, animations) {\r\n  const n1 = m - l + 1;\r\n  const n2 = r - m;\r\n  const L = new Array(n1);\r\n  const R = new Array(n2);\r\n\r\n  // copy left array\r\n  for (let i = 0; i < n1; i++) {\r\n    L[i] = arr[i + l];\r\n  }\r\n\r\n  // copy right array\r\n  for (let i = 0; i < n2; i++) {\r\n    R[i] = arr[i + m + 1];\r\n  }\r\n\r\n  let k = l;\r\n  let idxL = 0; // index for left array\r\n  let idxR = 0; // index for right array\r\n  const isSorted = l === 0 && r === arr.length - 1;\r\n\r\n  // merge two arrays\r\n  while (idxL < n1 && idxR < n2) {\r\n    animations.push([idxL + l, idxR + m + 1]); // comparing elements at i ,j in the orignal array\r\n    animations.push([idxL + l, idxR + m + 1]); // comparing elements at i ,j in the orignal array\r\n    animations.push([idxL + l, idxR + m + 1]); // comparing elements at i ,j in the orignal array\r\n\r\n    if (L[idxL] < R[idxR]) {\r\n      animations.push([k, L[idxL], isSorted, idxL + l]); // replace element at k of the original array with L[idxL]\r\n      arr[k++] = L[idxL++];\r\n    } else {\r\n      animations.push([k, R[idxR], false, k]); // replace element at k of the original array with R[idxR];\r\n      arr[k++] = R[idxR++];\r\n    }\r\n  }\r\n\r\n  // add remaining elements\r\n  while (idxL < n1) {\r\n    animations.push([idxL + l, idxL + l]);\r\n    animations.push([idxL + l, idxL + l]);\r\n    animations.push([idxL + l, idxL + l]);\r\n    animations.push([k, L[idxL], isSorted, idxL + l]); // replace element at k of the original array with L[idxL]\r\n    arr[k++] = L[idxL++];\r\n  }\r\n\r\n  while (idxR < n2) {\r\n    animations.push([idxR + m + 1, idxR + m + 1]);\r\n    animations.push([idxR + m + 1, idxR + m + 1]);\r\n    animations.push([idxR + m + 1, idxR + m + 1]);\r\n    animations.push([k, R[idxR], false, k]); // replace element at k of the original array with R[idxR];\r\n    arr[k++] = R[idxR++];\r\n  }\r\n\r\n  // sorted animations\r\n  if (isSorted) {\r\n    for (let i = idxL + l; i <= r; i++) {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([i, arr[i], isSorted, i]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction mergeSortHelper(arr, l, r, animations) {\r\n  if (l === r) return;\r\n\r\n  const m = l + Math.floor((r - l) / 2);\r\n  mergeSortHelper(arr, l, m, animations);\r\n  mergeSortHelper(arr, m + 1, r, animations);\r\n  merge(arr, l, r, m, animations);\r\n  return;\r\n}\r\n\r\nexport function mergeSort(arr) {\r\n  let animations = [];\r\n  mergeSortHelper(arr, 0, arr.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\n// heap sort implentation\r\nfunction heapify(arr, n, i, animations) {\r\n  if (n === 0) return;\r\n  let largestIdx = i;\r\n  let l = 2 * i + 1; // left child\r\n  let r = 2 * i + 2; // right child\r\n\r\n  if (l < n && arr[l] > arr[largestIdx]) largestIdx = l; // heapify left child\r\n  if (r < n && arr[r] > arr[largestIdx]) largestIdx = r; // heapify right child\r\n\r\n  animations.push([i, largestIdx]);\r\n  animations.push([i, largestIdx]);\r\n  animations.push([i, largestIdx]);\r\n  // if more heapify needed\r\n  if (largestIdx !== i) {\r\n    // swap\r\n    animations.push([i, largestIdx, arr[i], arr[largestIdx], false]);\r\n    swap(arr, i, largestIdx);\r\n\r\n    // heapify affectd subtrees\r\n    heapify(arr, n, largestIdx, animations);\r\n  } else {\r\n    animations.push([i, largestIdx, arr[largestIdx], arr[i], false]);\r\n  }\r\n}\r\n\r\nexport function heapSort(arr) {\r\n  const n = arr.length;\r\n  let animations = [];\r\n\r\n  // build max heap\r\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--)\r\n    heapify(arr, n, i, animations);\r\n\r\n  // extract sorted element\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    // swap to the end\r\n    animations.push([0, i]);\r\n    animations.push([0, i]);\r\n    animations.push([0, i]);\r\n    animations.push([0, i, arr[0], arr[i], true]);\r\n    swap(arr, 0, i);\r\n\r\n    // call max heapify on the reduced heap\r\n    heapify(arr, i, 0, animations);\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\n// radix sort implentation\r\nfunction countSort(arr, n, minValue, exp, radix, animations) {\r\n  let sortedArr = new Array(n);\r\n  let buckets = new Array(radix);\r\n  sortedArr.fill(0);\r\n  buckets.fill(0);\r\n  let firstBuckets = [];\r\n\r\n  // count occurences of digit of arr[i]\r\n  for (let i = 0; i < n; i++) {\r\n    const bucketIdx = Math.floor((arr[i] - minValue) / exp) % radix;\r\n\r\n    // linearly scan for buckets\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, arr[i], false]);\r\n    buckets[bucketIdx]++;\r\n  }\r\n\r\n  // change count[i] so that count[i] now contains actual position\r\n  for (let i = 1; i < radix; i++) buckets[i] += buckets[i - 1];\r\n\r\n  // find last bucket's element\r\n  for (let i of buckets) firstBuckets.push(i - 1);\r\n\r\n  // overwriting animations\r\n  let overwriting = [];\r\n\r\n  // build the shadow array\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    const bucketIdx = Math.floor((arr[i] - minValue) / exp) % radix;\r\n    if (firstBuckets.includes(buckets[bucketIdx] - 1)) {\r\n      overwriting.unshift([buckets[bucketIdx] - 1, arr[i], true]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n    } else {\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, arr[i], false]);\r\n    }\r\n    sortedArr[--buckets[bucketIdx]] = arr[i];\r\n  }\r\n\r\n  for (let animation of overwriting) animations.push(animation);\r\n\r\n  // copy sorted array;\r\n  for (let i = 0; i < n; i++) arr[i] = sortedArr[i];\r\n\r\n  // remove bucket yellow color\r\n  for (let i of firstBuckets) {\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, arr[i], false]);\r\n  }\r\n}\r\n\r\nexport function radixLSDSort(arr, radix) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n\r\n  // find maximum and minimum to get the most number of digits\r\n  let maxValue = arr[0];\r\n  let minValue = arr[0];\r\n  for (let i = 1; i < arr.length; i++) {\r\n    maxValue = Math.max(maxValue, arr[i]);\r\n    minValue = Math.min(minValue, arr[i]);\r\n  }\r\n\r\n  // repeated counting sort for each digit\r\n  for (let exp = 1; (maxValue - minValue) / exp >= 1; exp *= radix)\r\n    countSort(arr, n, minValue, exp, radix, animations);\r\n\r\n  // firnish sorted animations\r\n  for (let i = 0; i < n; i++) {\r\n    animations.push([i, 2]);\r\n    animations.push([i, 2]);\r\n    animations.push([i, 2]);\r\n    animations.push([i, arr[i], false]);\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\nfunction getMostExp(maxValue, minValue, radix) {\r\n  let exp = 1;\r\n  while ((maxValue - minValue) / exp >= 1) exp *= radix;\r\n  return exp / radix;\r\n}\r\n\r\nfunction sameElements(arr, l, r) {\r\n  for (let i = l; i < r; i++) if (arr[i] !== arr[i + 1]) return false;\r\n  return true;\r\n}\r\n\r\nfunction radixMSDSortHelper(arr, l, r, radix, animations) {\r\n  if (l >= r || sameElements(arr, l, r)) {\r\n    // firnish sorted animations\r\n    for (let i = l; i <= r; i++) {\r\n      animations.push([i, 2]);\r\n      animations.push([i, 2]);\r\n      animations.push([i, 2]);\r\n      animations.push([i, arr[i], false]);\r\n    }\r\n    return; // only one element or all elements are the same\r\n  }\r\n\r\n  let sortedArr = new Array(r - l + 1);\r\n  let buckets = new Array(radix);\r\n  sortedArr.fill(0);\r\n  buckets.fill(0);\r\n  let firstBuckets = [];\r\n\r\n  // find maximum and minimum to get the most significant digit\r\n  let maxValue = arr[l];\r\n  let minValue = arr[l];\r\n  for (let i = l + 1; i <= r; i++) {\r\n    maxValue = Math.max(maxValue, arr[i]);\r\n    minValue = Math.min(minValue, arr[i]);\r\n  }\r\n\r\n  const exp = getMostExp(maxValue, minValue, radix);\r\n\r\n  // color border of the bucket\r\n  animations.push([l, 3]);\r\n  animations.push([l, 3]);\r\n  animations.push([l, 3]);\r\n  animations.push([l, arr[l], false]);\r\n\r\n  animations.push([r, 3]);\r\n  animations.push([r, 3]);\r\n  animations.push([r, 3]);\r\n  animations.push([r, arr[r], false]);\r\n\r\n  // count occurences of digit of arr[i]\r\n  for (let i = l; i <= r; i++) {\r\n    const bucketIdx = Math.floor((arr[i] - minValue) / exp) % radix;\r\n\r\n    // linearly scan for buckets\r\n    if (i !== l && i !== r) {\r\n      animations.push([i, 0]);\r\n      animations.push([i, 0]);\r\n      animations.push([i, 0]);\r\n      animations.push([i, arr[i], false]);\r\n    }\r\n    buckets[bucketIdx]++;\r\n  }\r\n\r\n  // remove bucket blue color\r\n  for (let i of [l, r]) {\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, arr[i], false]);\r\n  }\r\n\r\n  // change count[i] so that count[i] now contains actual position\r\n  for (let i = 1; i < radix; i++) buckets[i] += buckets[i - 1];\r\n  const copy = [...buckets];\r\n\r\n  // find last bucket's element\r\n  for (let i of buckets) firstBuckets.push(l + i - 1);\r\n\r\n  // overwriting animations\r\n  let overwriting = [];\r\n\r\n  // build the shadow array\r\n  for (let i = r; i >= l; i--) {\r\n    const bucketIdx = Math.floor((arr[i] - minValue) / exp) % radix;\r\n    if (firstBuckets.includes(buckets[bucketIdx] - 1 + l)) {\r\n      overwriting.unshift([buckets[bucketIdx] - 1 + l, arr[i], true]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1 + l, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1 + l, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1 + l, 3]);\r\n    } else {\r\n      overwriting.push([buckets[bucketIdx] - 1 + l, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1 + l, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1 + l, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1 + l, arr[i], false]);\r\n    }\r\n    sortedArr[--buckets[bucketIdx]] = arr[i];\r\n  }\r\n\r\n  for (let animation of overwriting) animations.push(animation);\r\n\r\n  // copy sorted array;\r\n  for (let i = l; i <= r; i++) arr[i] = sortedArr[i - l];\r\n\r\n  // remove bucket yellow color\r\n  for (let i of firstBuckets) {\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, arr[i], false]);\r\n  }\r\n\r\n  // divide into buckets and sort each of them using insertion sort\r\n  for (let i = -1; i < radix - 1; i++) {\r\n    let new_l = i === -1 ? l : copy[i] + l;\r\n    let new_r = copy[i + 1] + l - 1;\r\n    radixMSDSortHelper(arr, new_l, new_r, radix, animations);\r\n  }\r\n}\r\n\r\nexport function radixMSDSort(arr, radix) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n  radixMSDSortHelper(arr, 0, n - 1, radix, animations);\r\n  return animations;\r\n}\r\n\r\n// bucket sort implentation\r\nexport function bucketSort(arr, bucketSize) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n  let firstBuckets = [];\r\n  let output = new Array(n);\r\n  let buckets = new Array(bucketSize);\r\n  output.fill(0);\r\n  buckets.fill(0);\r\n\r\n  // find maximum and minimum to get the most number of digits\r\n  let maxValue = arr[0];\r\n  for (let i = 1; i < n; i++) maxValue = Math.max(maxValue, arr[i]);\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    const bucketIdx =\r\n      arr[i] === maxValue\r\n        ? bucketSize - 1\r\n        : Math.floor((arr[i] * bucketSize) / maxValue);\r\n    // linearly scan for buckets\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, arr[i]]);\r\n    buckets[bucketIdx]++;\r\n  }\r\n\r\n  // change count[i] so that count[i] now contains actual position\r\n  for (let i = 1; i < bucketSize; i++) buckets[i] += buckets[i - 1];\r\n  const copy = [...buckets];\r\n\r\n  // find last bucket's element\r\n  for (let i of buckets) firstBuckets.push(i - 1);\r\n\r\n  // overwriting animations\r\n  let overwriting = [];\r\n\r\n  // build the shadow array\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    const bucketIdx =\r\n      arr[i] === maxValue\r\n        ? bucketSize - 1\r\n        : Math.floor((arr[i] * bucketSize) / maxValue);\r\n    if (firstBuckets.includes(buckets[bucketIdx] - 1)) {\r\n      overwriting.unshift([buckets[bucketIdx] - 1, arr[i], false, true]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n    } else {\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, arr[i], false, false]);\r\n    }\r\n    output[--buckets[bucketIdx]] = arr[i];\r\n  }\r\n\r\n  for (let animation of overwriting) animations.push(animation);\r\n\r\n  // copy divided buckets array;\r\n  for (let i = 0; i < n; i++) arr[i] = output[i];\r\n\r\n  // divide into buckets and sort each of them using insertion sort\r\n  for (let i = -1; i < bucketSize - 1; i++) {\r\n    let l = i === -1 ? 0 : copy[i];\r\n    let r = copy[i + 1] - 1;\r\n    insertionSortHelper(arr, l, r, animations);\r\n  }\r\n\r\n  return animations;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Element from \"./Element\";\r\nimport { animationType } from \"./Element\";\r\nimport \"./Arraybar.css\";\r\nimport {\r\n  bubbleSort,\r\n  insertionSort,\r\n  selectionSort,\r\n  cocktailShakerSort,\r\n  gnomeSort,\r\n  bitonicSort,\r\n  shellSort,\r\n  quickSort,\r\n  mergeSort,\r\n  heapSort,\r\n  radixLSDSort,\r\n  radixMSDSort,\r\n  bucketSort\r\n} from \"../algorithms/sorting\";\r\n\r\nconst HEIGHT = window.innerHeight;\r\nconst WIDTH = window.innerWidth;\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return min + Math.floor(Math.random() * (max - min + 1));\r\n}\r\n\r\nclass Arraybar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { generate: 0 };\r\n\r\n    // construct initial array\r\n    this.arraySize = 75; // default array size\r\n    this.width = Math.ceil((900 / this.arraySize / 1920) * WIDTH); // width of the array bar depends on the array size\r\n    this.array = [];\r\n    this.isVisualized = false;\r\n    this.constructInitArray();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  constructInitArray() {\r\n    for (let i = 0; i < this.arraySize; i++) {\r\n      this.array.push(randomIntFromInterval(10, 250));\r\n    }\r\n  }\r\n\r\n  setArray() {\r\n    for (let i = 0; i < this.array.length; i++) {\r\n      this[`element-${i}`].setElement(this.array[i], this.width);\r\n      this[`element-${i}`].setAnimation(animationType.DEFAULT);\r\n    }\r\n  }\r\n\r\n  randomGenerateArray() {\r\n    if (this.isVisualized) return;\r\n    this.width = Math.ceil((900 / this.arraySize / 1920) * WIDTH); // reset width\r\n    this.array = []; // reset array\r\n\r\n    for (let i = 0; i < this.arraySize; i++) {\r\n      this.array.push(randomIntFromInterval(10, 250));\r\n    }\r\n\r\n    this.setState({ generate: this.state.generate ^ 1 }, this.setArray);\r\n  }\r\n\r\n  resetAnimations() {\r\n    for (let i = 0; i < this.arraySize; i++) {\r\n      this[`element-${i}`].setAnimation(animationType.DEFAULT);\r\n    }\r\n  }\r\n\r\n  visualize(algorithm, speed) {\r\n    if (this.isVisualized) return;\r\n    this.isVisualized = true;\r\n    this.resetAnimations();\r\n\r\n    // ajust speed with array size\r\n    if (this.arraySize <= 30)\r\n      speed = Math.floor(30 / this.arraySize) * 30 + speed;\r\n    else speed = Math.floor(Math.floor(74 / this.arraySize) * 4) + speed;\r\n    let animations = [];\r\n    switch (algorithm) {\r\n      case \"Bubble Sort\":\r\n        animations = bubbleSort(this.array);\r\n        this.bubbleSortAnimations(animations, speed);\r\n        break;\r\n      case \"Insertion Sort\":\r\n        animations = insertionSort(this.array);\r\n        this.insertionSortAnimations(animations, speed);\r\n        break;\r\n      case \"Selection Sort\":\r\n        animations = selectionSort(this.array);\r\n        this.selectionSortAnimations(animations, speed);\r\n        break;\r\n      case \"Cocktail Shaker Sort\":\r\n        animations = cocktailShakerSort(this.array);\r\n        this.cocktailShakerSortAnimations(animations, speed);\r\n        break;\r\n      case \"Gnome Sort\":\r\n        animations = gnomeSort(this.array);\r\n        this.gnomeSortAnimations(animations, speed);\r\n        break;\r\n      case \"Bitonic Sort\":\r\n        animations = bitonicSort(this.array);\r\n        this.bitonicSortAnimations(animations, speed);\r\n        break;\r\n      case \"Shell Sort\":\r\n        animations = shellSort(this.array);\r\n        this.shellSortAnimations(animations, speed);\r\n        break;\r\n      case \"Quick Sort\":\r\n        animations = quickSort(this.array);\r\n        this.quickSortAnimations(animations, speed);\r\n        break;\r\n      case \"Merge Sort\":\r\n        animations = mergeSort(this.array);\r\n        this.mergeSortAnimations(animations, speed);\r\n        break;\r\n      case \"Heap Sort\":\r\n        animations = heapSort(this.array);\r\n        this.heapSortAnimations(animations, speed);\r\n        break;\r\n      case \"Radix Sort (LSD)\":\r\n        const radix = 4;\r\n        animations = radixLSDSort(this.array, radix);\r\n        this.radixLSDSortAnimations(animations, speed);\r\n        break;\r\n      case \"Radix Sort (MSD)\":\r\n        animations = radixMSDSort(this.array, 4);\r\n        this.radixMSDSortAnimations(animations, speed);\r\n        break;\r\n      case \"Bucket Sort\":\r\n        const bucketSize = Math.floor((this.arraySize * 10) / 150) + 2;\r\n        animations = bucketSort(this.array, bucketSize);\r\n        this.bucketSortAnimations(animations, speed);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // finish visualization\r\n    setTimeout(() => {\r\n      this.isVisualized = false;\r\n      this.props.finishVisualization();\r\n    }, 310 + animations.length * speed);\r\n  }\r\n\r\n  bubbleSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isSorted] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const barIdx = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  cocktailShakerSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  gnomeSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const barIdx = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  bitonicSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted) {\r\n            this[`element-${barOneIdx}`].setAnimation(animationType.PURPLE);\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n          }\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  shellSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isSorted] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const barIdx = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isPivot\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isPivot === 1) {\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n          } else if (isPivot === 2) {\r\n            this[`element-${barOneIdx}`].setAnimation(animationType.YELLOW);\r\n          }\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isSorted] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n          if (isSorted) {\r\n            let idx = animations[i][3];\r\n            this[`element-${idx}`].setAnimation(animationType.PURPLE);\r\n          }\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  radixLSDSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isBucket] = animations[i];\r\n        setTimeout(() => {\r\n          if (isBucket)\r\n            this[`element-${barIdx}`].setAnimation(animationType.YELLOW);\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barIdx, bucketColor] = animations[i];\r\n        let color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        if (bucketColor === 1) color = animationType.DEFAULT;\r\n        else if (bucketColor === 2) color = animationType.PURPLE;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  radixMSDSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isBucket] = animations[i];\r\n        setTimeout(() => {\r\n          if (isBucket)\r\n            this[`element-${barIdx}`].setAnimation(animationType.YELLOW);\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barIdx, bucketColor] = animations[i];\r\n        let color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        if (bucketColor === 1) color = animationType.DEFAULT;\r\n        else if (bucketColor === 2) color = animationType.PURPLE;\r\n        else if (bucketColor === 3) color = animationType.PINK;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  bucketSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isSorted, isBucket] = animations[i];\r\n        setTimeout(() => {\r\n          if (isBucket)\r\n            this[`element-${barIdx}`].setAnimation(animationType.YELLOW);\r\n          if (isSorted)\r\n            this[`element-${barIdx}`].setAnimation(animationType.PURPLE);\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barIdx, bucketColor] = animations[i];\r\n        let color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        if (bucketColor === 1) color = animationType.DEFAULT;\r\n        else if (bucketColor === 2) color = animationType.PURPLE;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"array-container\">\r\n        {this.array.map((value, idx) => {\r\n          return (\r\n            <Element\r\n              key={idx}\r\n              value={value}\r\n              width={this.width}\r\n              onRef={ref => (this[`element-${idx}`] = ref)}\r\n            ></Element>\r\n          );\r\n        })}\r\n\r\n        <div\r\n          className=\"array-bar\"\r\n          key={\"extra\"}\r\n          style={{\r\n            height: `${(((250 * HEIGHT) / 937) * 790) / 250}px`\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Arraybar;\r\n","import React, { Component } from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport MySlider from \"./Slider\";\r\nimport Navitem from \"./Navitem\";\r\nimport Arraybar from \"./Arraybar\";\r\nimport \"./Navbar.css\";\r\n\r\nconst algorithms = [\r\n  \"Bubble Sort\",\r\n  \"Insertion Sort\",\r\n  \"Selection Sort\",\r\n  \"Cocktail Shaker Sort\",\r\n  \"Gnome Sort\",\r\n  \"Bitonic Sort\",\r\n  \"Shell Sort\",\r\n  \"Quick Sort\",\r\n  \"Merge Sort\",\r\n  \"Heap Sort\",\r\n  \"Radix Sort (LSD)\",\r\n  \"Radix Sort (MSD)\",\r\n  \"Bucket Sort\"\r\n];\r\n\r\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\r\n\r\nclass SortingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.curAlgorithm = \"Bubble Sort\";\r\n    this.curSpeed = \"Fast\";\r\n  }\r\n\r\n  handleChangeAlgorithm = algorithm => {\r\n    this.curAlgorithm = algorithm;\r\n  };\r\n\r\n  handleChangeSpeed = speedname => {\r\n    this.curSpeed = speedname;\r\n  };\r\n\r\n  handleRandomGenerate = () => {\r\n    this.arrayBar.randomGenerateArray();\r\n  };\r\n\r\n  handleChangeArraySize = (event, newValue) => {\r\n    if (newValue !== this.arrayBar.arraySize && !this.arrayBar.isVisualized) {\r\n      this.arrayBar.arraySize = newValue;\r\n      this.arrayBar.randomGenerateArray();\r\n    }\r\n  };\r\n\r\n  handleVisualize = () => {\r\n    let speed = 5;\r\n    switch (this.curSpeed) {\r\n      case \"Fast\":\r\n        speed = 5;\r\n        break;\r\n      case \"Medium\":\r\n        speed = 7;\r\n        break;\r\n      case \"Slow\":\r\n        speed = 9;\r\n        break;\r\n      default:\r\n        speed = 5;\r\n        break;\r\n    }\r\n    if (!this.arrayBar.isVisualized) this.slider.setState({ disabled: true });\r\n    this.arrayBar.visualize(this.curAlgorithm, speed);\r\n  };\r\n\r\n  handleFinishVisualization = () => {\r\n    this.slider.setState({ disabled: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <Navbar variant=\"custom\">\r\n          <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\r\n          <Nav>\r\n            <Navitem\r\n              name={\"Visualize\"}\r\n              type={\"button\"}\r\n              onClick={this.handleVisualize}\r\n            />\r\n            <Navitem\r\n              name={\"Random Generate\"}\r\n              type={\"button\"}\r\n              onClick={this.handleRandomGenerate}\r\n            />\r\n            <MySlider\r\n              onChange={this.handleChangeArraySize}\r\n              onRef={ref => (this.slider = ref)}\r\n            />\r\n            <Navitem\r\n              name={\"Algorithms\"}\r\n              type={\"dropdown\"}\r\n              itemList={algorithms}\r\n              curItem={this.curAlgorithm}\r\n              onChangeItem={this.handleChangeAlgorithm}\r\n            />\r\n            <Navitem\r\n              name={\"Speed\"}\r\n              type={\"dropdown\"}\r\n              itemList={speeds}\r\n              curItem={this.curSpeed}\r\n              onChangeItem={this.handleChangeSpeed}\r\n            />\r\n          </Nav>\r\n        </Navbar>\r\n        <Arraybar\r\n          finishVisualization={this.handleFinishVisualization}\r\n          onRef={ref => (this.arrayBar = ref)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import React from \"react\";\r\nimport SortingVisualizer from \"./components/SortingVisualizer\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}