{"version":3,"sources":["components/ValueLabel.js","components/Slider.jsx","components/Navitem.jsx","components/Element.jsx","algorithms/sorting.js","components/Arraybar.jsx","components/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["withStyles","theme","thumb","transform","open","offset","zIndex","typography","body2","fontSize","pxToRem","lineHeight","transition","transitions","create","duration","shortest","top","left","transformOrigin","position","circle","display","alignItems","justifyContent","width","height","borderRadius","backgroundColor","label","color","palette","primary","contrastText","name","props","children","classes","className","value","valueLabelDisplay","React","cloneElement","clsx","PrettoSlider","root","marginTop","marginRight","marginLeft","active","disabled","border","boxShadow","valueLabel","track","rail","Slider","MySlider","state","this","onRef","undefined","defaultValue","min","max","ValueLabelComponent","ValueLabel","onChange","event","newValue","Component","Navitem","handleChangeItem","item","setState","curItem","onChangeItem","type","Button","id","onClick","Dropdown","Toggle","Menu","itemList","map","Item","key","onSelect","HEIGHT","window","innerHeight","Element","setElement","setAnimation","animation","animationType","DEFAULT","animationname","RED","BLUE","YELLOW","PURPLE","style","swap","arr","i","j","temp","insertionSortHelper","l","r","animations","push","k","quickSortHelper","partitionIdx","pivot","pivotElement","partition","Math","floor","random","getRandomPivot","mergeSortHelper","m","n1","n2","L","Array","R","idxL","idxR","isSorted","length","merge","heapify","n","largestIdx","countSort","minValue","exp","radix","sortedArr","buckets","fill","firstBuckets","bucketIdx","overwriting","includes","unshift","WIDTH","innerWidth","randomIntFromInterval","Arraybar","generate","arraySize","ceil","array","isVisualized","constructInitArray","setArray","algorithm","speed","resetAnimations","bubbleSort","bubbleSortAnimations","insertionSort","insertionSortAnimations","quickSort","quickSortAnimations","mergeSort","mergeSortAnimations","heapSort","heapSortAnimations","maxValue","radixSort","radixSortAnimations","bucketSize","output","copy","bucketSort","bucketSortAnimations","setTimeout","finishVisualization","barOneIdx","barTwoIdx","barOneValue","barTwoValue","barIdx","isPivot","idx","isBucket","bucketColor","ref","algorithms","speeds","SortingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeSpeed","speedname","curSpeed","handleRandomGenerate","arrayBar","randomGenerateArray","handleChangeArraySize","handleVisualize","slider","visualize","handleFinishVisualization","Navbar","variant","Brand","href","Nav","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mZA4EeA,mBAxEA,SAAAC,GAAK,MAAK,CACvBC,MAAO,CACL,SAAU,CACR,YAAa,CACXC,UAAW,gCAIjBC,KAAM,GACNC,OAAO,aACLC,OAAQ,GACLL,EAAMM,WAAWC,MAFhB,CAGJC,SAAUR,EAAMM,WAAWG,QAAQ,IACnCC,WAAY,IACZC,WAAYX,EAAMY,YAAYC,OAAO,CAAC,aAAc,CAClDC,SAAUd,EAAMY,YAAYE,SAASC,WAEvCC,KAAM,GACNC,KAAM,oBACNC,gBAAiB,gBACjBhB,UAAW,WACXiB,SAAU,aAEZC,OAAQ,CACNC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,MAAO,GACPC,OAAQ,GACRC,aAAc,gBACdC,gBAAiB,eACjBzB,UAAW,kBAEb0B,MAAO,CACLC,MAAO7B,EAAM8B,QAAQC,QAAQC,aAC7B9B,UAAW,oBAqCmB,CAAE+B,KAAM,qBAA3BlC,EAjCf,SAAoBmC,GAAQ,IAExBC,EAMED,EANFC,SACAC,EAKEF,EALFE,QACAC,EAIEH,EAJFG,UACAlC,EAGE+B,EAHF/B,KACAmC,EAEEJ,EAFFI,MACAC,EACEL,EADFK,kBAGF,MAA0B,QAAtBA,EACKJ,EAGFK,IAAMC,aACXN,EACA,CACEE,UAAWK,YACTP,EAASD,MAAMG,UADF,eAGVD,EAAQjC,KAAOA,GAA8B,OAAtBoC,GAE1BH,EAAQnC,QAGZ,0BAAMoC,UAAWK,YAAKN,EAAQhC,OAAQiC,IACpC,0BAAMA,UAAWD,EAAQhB,QACvB,0BAAMiB,UAAWD,EAAQR,OAAQU,SCjEnCK,EAAe5C,YAAW,CAC9B6C,KAAM,CACJf,MAAO,oBACPJ,OAAQ,EACRD,MAAO,IACPqB,UAAW,EACXC,YAAa,GACbC,YAAa,IAEfC,OAAQ,GACRC,SAAU,GACVhD,MAAO,CACLwB,OAAQ,GACRD,MAAO,GACPG,gBAAiB,OACjBuB,OAAQ,yBACRL,WAAY,EACZE,YAAa,EACb,aAAc,CACZvB,MAAO,GACPC,OAAQ,GACRE,gBAAiB,iBACjBkB,WAAY,EACZE,YAAa,EACb,UAAW,CACTI,UAAW,SAGf,2BAA4B,CAC1BA,UAAW,YAGfC,WAAY,CACVnC,KAAM,mBACND,IAAK,SAEPqC,MAAO,CACL5B,OAAQ,EACRC,aAAc,GAEhB4B,KAAM,CACJ7B,OAAQ,EACRC,aAAc,IA1CG3B,CA4ClBwD,KA6BYC,E,2MA1BbC,MAAQ,CAAER,UAAU,G,mFAGlBS,KAAKxB,MAAMyB,MAAMD,Q,6CAIjBA,KAAKxB,MAAMyB,WAAMC,K,+BAGT,IAAD,OACP,OACE,kBAACjB,EAAD,CACEJ,kBAAkB,OAClBsB,aAAc,GACdC,IAAK,EACLC,IAAK,IACLd,SAAUS,KAAKD,MAAMR,SAErBe,oBAAqBC,EACrBC,SAAU,SAACC,EAAOC,GAAR,OAAqB,EAAKlC,MAAMgC,SAASC,EAAOC,U,GArB3CC,a,gBCGRC,G,kBAhDb,WAAYpC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRqC,iBAAmB,SAAAC,GACjB,EAAKC,SAAS,CAAEC,QAASF,IACzB,EAAKtC,MAAMyC,aAAaH,IALxB,EAAKf,MAAQ,CAAExB,KAAMC,EAAMD,KAAM2C,KAAM1C,EAAM0C,KAAMF,QAASxC,EAAMwC,SAFjD,E,sEAUT,IAAD,OAEP,MAAa,WADIhB,KAAKD,MAAdmB,KAGJ,4BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,SAASC,QAAS,kBAAM,EAAK7C,MAAM6C,YAC3CrB,KAAKD,MAAMxB,OAMhB,4BACE,kBAAC+C,EAAA,EAAD,KACE,kBAACA,EAAA,EAASC,OAAV,CAAiBH,GAAG,mBACjBpB,KAAKD,MAAMxB,KAAO,MAAQyB,KAAKD,MAAMiB,QAAU,MAGlD,kBAACM,EAAA,EAASE,KAAV,KACGxB,KAAKxB,MAAMiD,SAASC,KAAI,SAAAZ,GACvB,OACE,kBAACQ,EAAA,EAASK,KAAV,CACEC,IAAKd,EACLe,SAAU,kBAAM,EAAKhB,iBAAiBC,IACtCM,GAAG,iBAEFN,a,GArCCH,c,OCFhBmB,G,MAASC,OAAOC,aAoDPC,E,YAjDb,WAAYzD,GAAQ,IAAD,8BACjB,4CAAMA,KAgBR0D,WAAa,SAACtD,EAAOd,GACnB,EAAKiD,SAAS,CAAEnC,QAAOd,WAlBN,EAqBnBqE,aAAe,SAAAC,GACb,EAAKrB,SAAS,CAAEqB,eApBhB,EAAKrC,MAAQ,CACXnB,MAAOJ,EAAMI,MACbd,MAAOU,EAAMV,MACbsE,UAAWC,EAAcC,SALV,E,iFAUjBtC,KAAKxB,MAAMyB,MAAMD,Q,6CAIjBA,KAAKxB,MAAMyB,WAAMC,K,+BAWT,IAAD,EAC2BF,KAAKD,MAAjCjC,EADC,EACDA,MAAOc,EADN,EACMA,MAAOwD,EADb,EACaA,UAChBG,EACFH,IAAcC,EAAcG,IACxB,MACAJ,IAAcC,EAAcI,KAC5B,OACAL,IAAcC,EAAcK,OAC5B,SACAN,IAAcC,EAAcM,OAC5B,SACA,GACN,OACE,yBACEhE,UAAS,oBAAe4D,GACxBK,MAAO,CACL9E,MAAM,GAAD,OAAKA,EAAL,MACLC,OAAO,GAAD,OAAQa,EAAQkD,EAAU,IAAO,IAAO,IAAxC,a,GA3CMnB,aAoDT0B,EAAgB,CAC3BC,QAAS,EACTE,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,OAAQ,GC9DV,SAASE,EAAKC,EAAKC,EAAGC,GACpB,IAAIC,EAAOH,EAAIC,GACfD,EAAIC,GAAKD,EAAIE,GACbF,EAAIE,GAAKC,EAmCX,SAASC,EAAoBJ,EAAKK,EAAGC,EAAGC,GAElCF,IAAMC,IAERC,EAAWC,KAAK,CAACH,IACjBE,EAAWC,KAAK,CAACH,IACjBE,EAAWC,KAAK,CAACH,IAGjBE,EAAWC,KAAK,CAACH,EAAGL,EAAIK,IAAI,KAI9B,IAAK,IAAIJ,EAAII,EAAI,EAAGJ,GAAKK,EAAGL,IAAK,CAC/B,IAAIC,OAAC,EACDC,EAAOH,EAAIC,GAGf,IAAKC,EAAID,EAAGC,EAAIG,GAAKL,EAAIE,EAAI,GAAKC,EAAMD,IAEtCK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IAGjBK,EAAWC,KAAK,CAACN,EAAGF,EAAIE,EAAI,GAAID,IAAMK,IACtCN,EAAIE,GAAKF,EAAIE,EAAI,GAcnB,GAVAK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IACjBK,EAAWC,KAAK,CAACN,IAGjBK,EAAWC,KAAK,CAACN,EAAGC,EAAMF,IAAMK,IAEhCN,EAAIE,GAAKC,EAGLF,IAAMK,EACR,IAAK,IAAIG,EAAIP,EAAI,EAAGO,GAAKJ,EAAGI,IAE1BF,EAAWC,KAAK,CAACC,IACjBF,EAAWC,KAAK,CAACC,IACjBF,EAAWC,KAAK,CAACC,IAGjBF,EAAWC,KAAK,CAACC,EAAGT,EAAIS,GAAIR,IAAMK,KAkD1C,SAASI,EAAgBV,EAAKK,EAAGC,EAAGC,GAClC,KAAIF,EAAIC,GAAR,CACA,IACMK,EAlCR,SAAmBX,EAAKK,EAAGC,EAAGM,EAAOL,GACnC,IAAII,EAAeN,EAAI,EACjBQ,EAAeb,EAAIY,GAEzBL,EAAWC,KAAK,CAACF,EAAGM,IACpBL,EAAWC,KAAK,CAACF,EAAGM,IACpBL,EAAWC,KAAK,CAACF,EAAGM,IACpBL,EAAWC,KAAK,CAACF,EAAGM,EAAOZ,EAAIM,GAAIN,EAAIY,GAAQ,IAC/Cb,EAAKC,EAAKM,EAAGM,GAEb,IAAK,IAAIX,EAAII,EAAGJ,EAAIK,EAAGL,IACrBM,EAAWC,KAAK,CAACP,EAAGU,EAAe,IACnCJ,EAAWC,KAAK,CAACP,EAAGU,EAAe,IACnCJ,EAAWC,KAAK,CAACP,EAAGU,EAAe,IAE/BX,EAAIC,IAAMY,GACZN,EAAWC,KAAK,CAACP,EAAGU,EAAe,EAAGX,EAAIC,GAAID,EAAIW,EAAe,GAAI,IACrEZ,EAAKC,EAAKC,IAAKU,IAEfJ,EAAWC,KAAK,CAACP,EAAGU,EAAe,EAAGX,EAAIW,EAAe,GAAIX,EAAIC,GAAI,IASzE,OALAM,EAAWC,KAAK,CAACF,EAAGK,EAAe,IACnCJ,EAAWC,KAAK,CAACF,EAAGK,EAAe,IACnCJ,EAAWC,KAAK,CAACF,EAAGK,EAAe,IACnCJ,EAAWC,KAAK,CAACF,EAAGK,EAAe,EAAGX,EAAIM,GAAIN,EAAIW,EAAe,GAAI,IACrEZ,EAAKC,EAAKM,IAAKK,GACRA,EAMcG,CAAUd,EAAKK,EAAGC,EAtCzC,SAAwBD,EAAGC,GACzB,OAAOD,EAAIU,KAAKC,MAAMD,KAAKE,UAAYX,EAAID,EAAI,IAoCjCa,CAAeb,EAAGC,GACiBC,GAEjDG,EAAgBV,EAAKW,EAAe,EAAGL,EAAGC,GAC1CG,EAAgBV,EAAKK,EAAGM,EAAe,EAAGJ,IA0E5C,SAASY,EAAgBnB,EAAKK,EAAGC,EAAGC,GAClC,GAAIF,IAAMC,EAAV,CAEA,IAAMc,EAAIf,EAAIU,KAAKC,OAAOV,EAAID,GAAK,GACnCc,EAAgBnB,EAAKK,EAAGe,EAAGb,GAC3BY,EAAgBnB,EAAKoB,EAAI,EAAGd,EAAGC,GArEjC,SAAeP,EAAKK,EAAGC,EAAGc,EAAGb,GAO3B,IANA,IAAMc,EAAKD,EAAIf,EAAI,EACbiB,EAAKhB,EAAIc,EACTG,EAAI,IAAIC,MAAMH,GACdI,EAAI,IAAID,MAAMF,GAGXrB,EAAI,EAAGA,EAAIoB,EAAIpB,IACtBsB,EAAEtB,GAAKD,EAAIC,EAAII,GAIjB,IAAK,IAAIJ,EAAI,EAAGA,EAAIqB,EAAIrB,IACtBwB,EAAExB,GAAKD,EAAIC,EAAImB,EAAI,GASrB,IANA,IAAIX,EAAIJ,EACJqB,EAAO,EACPC,EAAO,EACLC,EAAiB,IAANvB,GAAWC,IAAMN,EAAI6B,OAAS,EAGxCH,EAAOL,GAAMM,EAAOL,GACzBf,EAAWC,KAAK,CAACkB,EAAOrB,EAAGsB,EAAOP,EAAI,IACtCb,EAAWC,KAAK,CAACkB,EAAOrB,EAAGsB,EAAOP,EAAI,IACtCb,EAAWC,KAAK,CAACkB,EAAOrB,EAAGsB,EAAOP,EAAI,IAElCG,EAAEG,GAAQD,EAAEE,IACdpB,EAAWC,KAAK,CAACC,EAAGc,EAAEG,GAAOE,EAAUF,EAAOrB,IAC9CL,EAAIS,KAAOc,EAAEG,OAEbnB,EAAWC,KAAK,CAACC,EAAGgB,EAAEE,IAAO,EAAOlB,IACpCT,EAAIS,KAAOgB,EAAEE,MAKjB,KAAOD,EAAOL,GACZd,EAAWC,KAAK,CAACkB,EAAOrB,EAAGqB,EAAOrB,IAClCE,EAAWC,KAAK,CAACkB,EAAOrB,EAAGqB,EAAOrB,IAClCE,EAAWC,KAAK,CAACkB,EAAOrB,EAAGqB,EAAOrB,IAClCE,EAAWC,KAAK,CAACC,EAAGc,EAAEG,GAAOE,EAAUF,EAAOrB,IAC9CL,EAAIS,KAAOc,EAAEG,KAGf,KAAOC,EAAOL,GACZf,EAAWC,KAAK,CAACmB,EAAOP,EAAI,EAAGO,EAAOP,EAAI,IAC1Cb,EAAWC,KAAK,CAACmB,EAAOP,EAAI,EAAGO,EAAOP,EAAI,IAC1Cb,EAAWC,KAAK,CAACmB,EAAOP,EAAI,EAAGO,EAAOP,EAAI,IAC1Cb,EAAWC,KAAK,CAACC,EAAGgB,EAAEE,IAAO,EAAOlB,IACpCT,EAAIS,KAAOgB,EAAEE,KAIf,GAAIC,EACF,IAAK,IAAI3B,EAAIyB,EAAOrB,EAAGJ,GAAKK,EAAGL,IAC7BM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGA,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,GAAI2B,EAAU3B,IAW1C6B,CAAM9B,EAAKK,EAAGC,EAAGc,EAAGb,IAUtB,SAASwB,EAAQ/B,EAAKgC,EAAG/B,EAAGM,GAC1B,GAAU,IAANyB,EAAJ,CACA,IAAIC,EAAahC,EACbI,EAAI,EAAIJ,EAAI,EACZK,EAAI,EAAIL,EAAI,EAEZI,EAAI2B,GAAKhC,EAAIK,GAAKL,EAAIiC,KAAaA,EAAa5B,GAChDC,EAAI0B,GAAKhC,EAAIM,GAAKN,EAAIiC,KAAaA,EAAa3B,GAEpDC,EAAWC,KAAK,CAACP,EAAGgC,IACpB1B,EAAWC,KAAK,CAACP,EAAGgC,IACpB1B,EAAWC,KAAK,CAACP,EAAGgC,IAEhBA,IAAehC,GAEjBM,EAAWC,KAAK,CAACP,EAAGgC,EAAYjC,EAAIC,GAAID,EAAIiC,IAAa,IACzDlC,EAAKC,EAAKC,EAAGgC,GAGbF,EAAQ/B,EAAKgC,EAAGC,EAAY1B,IAE5BA,EAAWC,KAAK,CAACP,EAAGgC,EAAYjC,EAAIiC,GAAajC,EAAIC,IAAI,KA6B7D,SAASiC,EAAUlC,EAAKgC,EAAGG,EAAUC,EAAKC,EAAO9B,GAC/C,IAAI+B,EAAY,IAAId,MAAMQ,GACtBO,EAAU,IAAIf,MAAMa,GACxBC,EAAUE,KAAK,GACfD,EAAQC,KAAK,GAIb,IAHA,IAAIC,EAAe,GAGVxC,EAAI,EAAGA,EAAI+B,EAAG/B,IAAK,CAC1B,IAAMyC,EAAY3B,KAAKC,OAAOhB,EAAIC,GAAKkC,GAAYC,GAAOC,EAG1D9B,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,IAC5BsC,EAAQG,KAIV,IAAK,IAAIzC,EAAI,EAAGA,EAAIoC,EAAOpC,IAAKsC,EAAQtC,IAAMsC,EAAQtC,EAAI,GAG1D,cAAcsC,EAAd,gBAAK,IAAItC,EAAC,KAAawC,EAAajC,KAAKP,EAAI,GAM7C,IAHA,IAAI0C,EAAc,GAGT1C,EAAI+B,EAAI,EAAG/B,GAAK,EAAGA,IAAK,CAC/B,IAAMyC,EAAY3B,KAAKC,OAAOhB,EAAIC,GAAKkC,GAAYC,GAAOC,EACtDI,EAAaG,SAASL,EAAQG,GAAa,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG1C,EAAIC,IAAI,IACrD0C,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,MAE7CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG,IAC1CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG,IAC1CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG,IAC1CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG1C,EAAIC,IAAI,KAEpDqC,IAAYC,EAAQG,IAAc1C,EAAIC,GAGxC,cAAsB0C,EAAtB,gBAAK,IAAIrD,EAAS,KAAiBiB,EAAWC,KAAKlB,GAGnD,IAAK,IAAIW,EAAI,EAAGA,EAAI+B,EAAG/B,IAAKD,EAAIC,GAAKqC,EAAUrC,GAG/C,cAAcwC,EAAd,eAA4B,CAAvB,IAAIxC,EAAC,KACRM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,KCnUhC,IAAMjB,EAASC,OAAOC,YAChB4D,EAAQ7D,OAAO8D,WAErB,SAASC,EAAsB1F,EAAKC,GAClC,OAAOD,EAAMyD,KAAKC,MAAMD,KAAKE,UAAY1D,EAAMD,EAAM,I,IA6VxC2F,E,YAzVb,WAAYvH,GAAQ,IAAD,8BACjB,4CAAMA,KAEDuB,MAAQ,CAAEiG,SAAU,GAGzB,EAAKC,UAAY,GACjB,EAAKnI,MAAQ+F,KAAKqC,KAAM,IAAM,EAAKD,UAAY,KAAQL,GACvD,EAAKO,MAAQ,GACb,EAAKC,cAAe,EACpB,EAAKC,qBAVY,E,iFAcjBrG,KAAKxB,MAAMyB,MAAMD,Q,6CAIjBA,KAAKxB,MAAMyB,WAAMC,K,2CAIjB,IAAK,IAAI6C,EAAI,EAAGA,EAAI/C,KAAKiG,UAAWlD,IAClC/C,KAAKmG,MAAM7C,KAAKwC,EAAsB,GAAI,Q,iCAK5C,IAAK,IAAI/C,EAAI,EAAGA,EAAI/C,KAAKmG,MAAMxB,OAAQ5B,IACrC/C,KAAK,WAAL,OAAgB+C,IAAKb,WAAWlC,KAAKmG,MAAMpD,GAAI/C,KAAKlC,OACpDkC,KAAK,WAAL,OAAgB+C,IAAKZ,aAAaE,EAAcC,W,4CAKlD,IAAItC,KAAKoG,aAAT,CACApG,KAAKlC,MAAQ+F,KAAKqC,KAAM,IAAMlG,KAAKiG,UAAY,KAAQL,GACvD5F,KAAKmG,MAAQ,GAEb,IAAK,IAAIpD,EAAI,EAAGA,EAAI/C,KAAKiG,UAAWlD,IAClC/C,KAAKmG,MAAM7C,KAAKwC,EAAsB,GAAI,MAG5C9F,KAAKe,SAAS,CAAEiF,SAAgC,EAAtBhG,KAAKD,MAAMiG,UAAgBhG,KAAKsG,a,wCAI1D,IAAK,IAAIvD,EAAI,EAAGA,EAAI/C,KAAKiG,UAAWlD,IAClC/C,KAAK,WAAL,OAAgB+C,IAAKZ,aAAaE,EAAcC,W,gCAI1CiE,EAAWC,GAAQ,IAAD,OAC1B,IAAIxG,KAAKoG,aAAT,CACApG,KAAKoG,cAAe,EAEpBpG,KAAKyG,kBAEL,IAAIpD,EAAa,GACjB,OAAQkD,GACN,IAAK,cACHlD,ED5ED,SAAoBP,GAKzB,IAJA,IAAMgC,EAAIhC,EAAI6B,OACVtB,EAAa,GAGRN,EAAI,EAAGA,EAAI+B,EAAG/B,IACrB,IAAK,IAAIC,EAAI,EAAGA,EAAI8B,EAAI/B,EAAI,EAAGC,IAE7BK,EAAWC,KAAK,CAACN,EAAGA,EAAI,IACxBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,IACxBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,IACpBF,EAAIE,GAAKF,EAAIE,EAAI,IAEnBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,EAAGF,EAAIE,GAAIF,EAAIE,EAAI,GAAIA,EAAI,IAAM8B,EAAI/B,EAAI,IACjEF,EAAKC,EAAKE,EAAGA,EAAI,IAEjBK,EAAWC,KAAK,CAACN,EAAGA,EAAI,EAAGF,EAAIE,EAAI,GAAIF,EAAIE,GAAIA,EAAI,IAAM8B,EAAI/B,EAAI,IAWvE,OALAM,EAAWC,KAAK,CAAC,EAAG,IACpBD,EAAWC,KAAK,CAAC,EAAG,IACpBD,EAAWC,KAAK,CAAC,EAAG,IACpBD,EAAWC,KAAK,CAAC,EAAG,EAAGR,EAAI,GAAIA,EAAI,IAAI,IAEhCO,ECiDYqD,CAAW1G,KAAKmG,OAC7BnG,KAAK2G,qBAAqBtD,EAAYmD,GACtC,MACF,IAAK,iBACHnD,EDKD,SAAuBP,GAC5B,IACIO,EAAa,GAGjB,OADAH,EAAoBJ,EAAK,EAHfA,EAAI6B,OAGkB,EAAGtB,GAC5BA,ECVYuD,CAAc5G,KAAKmG,OAChCnG,KAAK6G,wBAAwBxD,EAAYmD,GACzC,MACF,IAAK,aACHnD,EDsDD,SAAmBP,GACxB,IAAIO,EAAa,GAEjB,OADAG,EAAgBV,EAAK,EAAGA,EAAI6B,OAAS,EAAGtB,GACjCA,ECzDYyD,CAAU9G,KAAKmG,OAC5BnG,KAAK+G,oBAAoB1D,EAAYmD,GACrC,MACF,IAAK,aACHnD,EDkID,SAAmBP,GACxB,IAAIO,EAAa,GAEjB,OADAY,EAAgBnB,EAAK,EAAGA,EAAI6B,OAAS,EAAGtB,GACjCA,ECrIY2D,CAAUhH,KAAKmG,OAC5BnG,KAAKiH,oBAAoB5D,EAAYmD,GACrC,MACF,IAAK,YACHnD,ED8JD,SAAkBP,GAKvB,IAJA,IAAMgC,EAAIhC,EAAI6B,OACVtB,EAAa,GAGRN,EAAIc,KAAKC,MAAMgB,EAAI,GAAK,EAAG/B,GAAK,EAAGA,IAC1C8B,EAAQ/B,EAAKgC,EAAG/B,EAAGM,GAGrB,IAAK,IAAIN,EAAI+B,EAAI,EAAG/B,GAAK,EAAGA,IAE1BM,EAAWC,KAAK,CAAC,EAAGP,IACpBM,EAAWC,KAAK,CAAC,EAAGP,IACpBM,EAAWC,KAAK,CAAC,EAAGP,IACpBM,EAAWC,KAAK,CAAC,EAAGP,EAAGD,EAAI,GAAIA,EAAIC,IAAI,IACvCF,EAAKC,EAAK,EAAGC,GAGb8B,EAAQ/B,EAAKC,EAAG,EAAGM,GAGrB,OAAOA,ECnLY6D,CAASlH,KAAKmG,OAC3BnG,KAAKmH,mBAAmB9D,EAAYmD,GACpC,MACF,IAAK,aAEHnD,ED6OD,SAAmBP,EAAKqC,GAO7B,IANA,IAAI9B,EAAa,GACXyB,EAAIhC,EAAI6B,OAGVyC,EAAWtE,EAAI,GACfmC,EAAWnC,EAAI,GACVC,EAAI,EAAGA,EAAID,EAAI6B,OAAQ5B,IAC9BqE,EAAWvD,KAAKxD,IAAI+G,EAAUtE,EAAIC,IAClCkC,EAAWpB,KAAKzD,IAAI6E,EAAUnC,EAAIC,IAIpC,IAAK,IAAImC,EAAM,GAAIkC,EAAWnC,GAAYC,GAAO,EAAGA,GAAOC,EACzDH,EAAUlC,EAAKgC,EAAGG,EAAUC,EAAKC,EAAO9B,GAG1C,IAAK,IAAIN,EAAI,EAAGA,EAAI+B,EAAG/B,IACrBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,IAAI,IAG9B,OAAOM,ECrQYgE,CAAUrH,KAAKmG,MADd,GAEdnG,KAAKsH,oBAAoBjE,EAAYmD,GACrC,MACF,IAAK,cACH,IAAMe,EAAa1D,KAAKC,MAAwB,GAAjB9D,KAAKiG,UAAkB,KAAO,EAC7D5C,EDoQD,SAAoBP,EAAKyE,GAC9B,IAAIlE,EAAa,GACXyB,EAAIhC,EAAI6B,OACVY,EAAe,GACfiC,EAAS,IAAIlD,MAAMQ,GACnBO,EAAU,IAAIf,MAAMiD,GACxBC,EAAOlC,KAAK,GACZD,EAAQC,KAAK,GAIb,IADA,IAAI8B,EAAWtE,EAAI,GACVC,EAAI,EAAGA,EAAI+B,EAAG/B,IAAKqE,EAAWvD,KAAKxD,IAAI+G,EAAUtE,EAAIC,IAE9D,IAAK,IAAIA,EAAI,EAAGA,EAAI+B,EAAG/B,IAAK,CAC1B,IAAMyC,EACJ1C,EAAIC,KAAOqE,EACPG,EAAa,EACb1D,KAAKC,MAAOhB,EAAIC,GAAKwE,EAAcH,GAEzC/D,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAG,IACpBM,EAAWC,KAAK,CAACP,EAAGD,EAAIC,KACxBsC,EAAQG,KAIV,IAAK,IAAIzC,EAAI,EAAGA,EAAIwE,EAAYxE,IAAKsC,EAAQtC,IAAMsC,EAAQtC,EAAI,GAI/D,IAHA,IAAM0E,EAAI,UAAOpC,GAGjB,MAAcA,EAAd,gBAAK,IAAItC,EAAC,KAAawC,EAAajC,KAAKP,EAAI,GAM7C,IAHA,IAAI0C,EAAc,GAGT1C,EAAI+B,EAAI,EAAG/B,GAAK,EAAGA,IAAK,CAC/B,IAAMyC,EACJ1C,EAAIC,KAAOqE,EACPG,EAAa,EACb1D,KAAKC,MAAOhB,EAAIC,GAAKwE,EAAcH,GACrC7B,EAAaG,SAASL,EAAQG,GAAa,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG1C,EAAIC,IAAI,GAAO,IAC5D0C,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,IAC7CC,EAAYE,QAAQ,CAACN,EAAQG,GAAa,EAAG,MAE7CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG,IAC1CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG,IAC1CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG,IAC1CC,EAAYnC,KAAK,CAAC+B,EAAQG,GAAa,EAAG1C,EAAIC,IAAI,GAAO,KAE3DyE,IAASnC,EAAQG,IAAc1C,EAAIC,GAGrC,cAAsB0C,EAAtB,gBAAK,IAAIrD,EAAS,KAAiBiB,EAAWC,KAAKlB,GAGnD,IAAK,IAAIW,EAAI,EAAGA,EAAI+B,EAAG/B,IAAKD,EAAIC,GAAKyE,EAAOzE,GAG5C,IAAK,IAAIA,GAAK,EAAGA,EAAIwE,EAAa,EAAGxE,IAAK,CAGxCG,EAAoBJ,GAFL,IAAPC,EAAW,EAAI0E,EAAK1E,GACpB0E,EAAK1E,EAAI,GAAK,EACSM,GAGjC,OAAOA,ECxUYqE,CAAW1H,KAAKmG,MAAOoB,GACpCvH,KAAK2H,qBAAqBtE,EAAYmD,GAO1CoB,YAAW,WACT,EAAKxB,cAAe,EACpB,EAAK5H,MAAMqJ,wBACV,IAAMxE,EAAWsB,OAAS6B,M,2CAGVnD,EAAYmD,GAC/B,IADuC,IAAD,OAC7BzD,EAAI,EAAGA,EAAIM,EAAWsB,OAAQ5B,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb+E,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObvD,EAPa,KASfkD,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa5F,WAAW+F,EAAa,EAAKnK,OAC1D,EAAK,WAAD,OAAYiK,IAAa7F,WAAW8F,EAAa,EAAKlK,OACtD4G,GACF,EAAK,WAAD,OAAYqD,IAAa5F,aAAaE,EAAcM,UACzD,IAAMI,EAAIyD,GAdG,GAeV,WAAD,kBAE0BnD,EAAWN,GAFrC,GAEE+E,EAFF,KAEaC,EAFb,KAGC5J,EACJ4E,EAAI,IAAM,EACNV,EAAcG,IACdO,EAAI,IAAM,EACVV,EAAcI,KACdJ,EAAcC,QACpBsF,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa3F,aAAahE,GAC1C,EAAK,WAAD,OAAY4J,IAAa5F,aAAahE,KACzC,IAAM4E,EAAIyD,GAZP,K,8CAiBYnD,EAAYmD,GAClC,IAD0C,IAAD,OAChCzD,EAAI,EAAGA,EAAIM,EAAWsB,OAAQ5B,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEsBM,EAAWN,GAFjC,GAERmF,EAFQ,KAEAxH,EAFA,KAEUgE,EAFV,KAGfkD,YAAW,WACT,EAAK,WAAD,OAAYM,IAAUhG,WAAWxB,EAAU,EAAK5C,OAChD4G,GACF,EAAK,WAAD,OAAYwD,IAAU/F,aAAaE,EAAcM,UACtD,IAAMI,EAAIyD,GAPG,GAQV,WAAD,IAEE0B,EAFF,YAEY7E,EAAWN,GAFvB,MAGC5E,EACJ4E,EAAI,IAAM,EACNV,EAAcG,IACdO,EAAI,IAAM,EACVV,EAAcI,KACdJ,EAAcC,QACpBsF,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU/F,aAAahE,KACtC,IAAM4E,EAAIyD,GAXP,K,0CAgBQnD,EAAYmD,GAC9B,IADsC,IAAD,OAC5BzD,EAAI,EAAGA,EAAIM,EAAWsB,OAAQ5B,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb+E,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObE,EAPa,KASfP,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa5F,WAAW+F,EAAa,EAAKnK,OAC1D,EAAK,WAAD,OAAYiK,IAAa7F,WAAW8F,EAAa,EAAKlK,OAC1C,IAAZqK,EACF,EAAK,WAAD,OAAYJ,IAAa5F,aAAaE,EAAcM,QACnC,IAAZwF,GACT,EAAK,WAAD,OAAYL,IAAa3F,aAAaE,EAAcK,UAEzD,IAAMK,EAAIyD,GAjBG,GAkBV,WAAD,kBAE0BnD,EAAWN,GAFrC,GAEE+E,EAFF,KAEaC,EAFb,KAGC5J,EACJ4E,EAAI,IAAM,EACNV,EAAcG,IACdO,EAAI,IAAM,EACVV,EAAcI,KACdJ,EAAcC,QACpBsF,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa3F,aAAahE,GAC1C,EAAK,WAAD,OAAY4J,IAAa5F,aAAahE,KACzC,IAAM4E,EAAIyD,GAZP,K,0CAiBQnD,EAAYmD,GAC9B,IADsC,IAAD,kBAC5BzD,GACP,GAAIA,EAAI,IAAM,EAAG,mBAEsBM,EAAWN,GAFjC,GAERmF,EAFQ,KAEAxH,EAFA,KAEUgE,EAFV,KAGfkD,YAAW,WAET,GADA,EAAK,WAAD,OAAYM,IAAUhG,WAAWxB,EAAU,EAAK5C,OAChD4G,EAAU,CACZ,IAAI0D,EAAM/E,EAAWN,GAAG,GACxB,EAAK,WAAD,OAAYqF,IAAOjG,aAAaE,EAAcM,WAEnD,IAAMI,EAAIyD,OACR,mBAE0BnD,EAAWN,GAFrC,GAEE+E,EAFF,KAEaC,EAFb,KAGC5J,EACJ4E,EAAI,IAAM,EACNV,EAAcG,IACdO,EAAI,IAAM,EACVV,EAAcI,KACdJ,EAAcC,QACpBsF,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa3F,aAAahE,GAC1C,EAAK,WAAD,OAAY4J,IAAa5F,aAAahE,KACzC,IAAM4E,EAAIyD,KAvBRzD,EAAI,EAAGA,EAAIM,EAAWsB,OAAQ5B,IAAM,EAApCA,K,yCA4BQM,EAAYmD,GAC7B,IADqC,IAAD,OAC3BzD,EAAI,EAAGA,EAAIM,EAAWsB,OAAQ5B,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAQXM,EAAWN,GARA,GAGb+E,EAHa,KAIbC,EAJa,KAKbC,EALa,KAMbC,EANa,KAObvD,EAPa,KASfkD,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa5F,WAAW+F,EAAa,EAAKnK,OAC1D,EAAK,WAAD,OAAYiK,IAAa7F,WAAW8F,EAAa,EAAKlK,OACtD4G,GACF,EAAK,WAAD,OAAYqD,IAAa5F,aAAaE,EAAcM,UACzD,IAAMI,EAAIyD,GAdG,GAeV,WAAD,kBAE0BnD,EAAWN,GAFrC,GAEE+E,EAFF,KAEaC,EAFb,KAGC5J,EACJ4E,EAAI,IAAM,EACNV,EAAcG,IACdO,EAAI,IAAM,EACVV,EAAcI,KACdJ,EAAcC,QACpBsF,YAAW,WACT,EAAK,WAAD,OAAYE,IAAa3F,aAAahE,GAC1C,EAAK,WAAD,OAAY4J,IAAa5F,aAAahE,KACzC,IAAM4E,EAAIyD,GAZP,K,0CAiBQnD,EAAYmD,GAC9B,IADsC,IAAD,OAC5BzD,EAAI,EAAGA,EAAIM,EAAWsB,OAAQ5B,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEsBM,EAAWN,GAFjC,GAERmF,EAFQ,KAEAxH,EAFA,KAEU2H,EAFV,KAGfT,YAAW,WACLS,GACF,EAAK,WAAD,OAAYH,IAAU/F,aAAaE,EAAcK,QACvD,EAAK,WAAD,OAAYwF,IAAUhG,WAAWxB,EAAU,EAAK5C,SACnD,IAAMiF,EAAIyD,GAPG,GAQV,WAAD,kBAEyBnD,EAAWN,GAFpC,GAEEmF,EAFF,KAEUI,EAFV,KAGDnK,EACF4E,EAAI,IAAM,EACNV,EAAcG,IACdO,EAAI,IAAM,EACVV,EAAcI,KACdJ,EAAcC,QACA,IAAhBgG,EAAmBnK,EAAQkE,EAAcC,QACpB,IAAhBgG,IAAmBnK,EAAQkE,EAAcM,QAClDiF,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU/F,aAAahE,KACtC,IAAM4E,EAAIyD,GAbP,K,2CAkBSnD,EAAYmD,GAC/B,IADuC,IAAD,OAC7BzD,EAAI,EAAGA,EAAIM,EAAWsB,OAAQ5B,IACjCA,EAAI,IAAM,EAAI,WAAD,kBAEgCM,EAAWN,GAF3C,GAERmF,EAFQ,KAEAxH,EAFA,KAEUgE,EAFV,KAEoB2D,EAFpB,KAGfT,YAAW,WACLS,GACF,EAAK,WAAD,OAAYH,IAAU/F,aAAaE,EAAcK,QACnDgC,GACF,EAAK,WAAD,OAAYwD,IAAU/F,aAAaE,EAAcM,QACvD,EAAK,WAAD,OAAYuF,IAAUhG,WAAWxB,EAAU,EAAK5C,SACnD,IAAMiF,EAAIyD,GATG,GAUV,WAAD,kBAEyBnD,EAAWN,GAFpC,GAEEmF,EAFF,KAEUI,EAFV,KAGDnK,EACF4E,EAAI,IAAM,EACNV,EAAcG,IACdO,EAAI,IAAM,EACVV,EAAcI,KACdJ,EAAcC,QACA,IAAhBgG,EAAmBnK,EAAQkE,EAAcC,QACpB,IAAhBgG,IAAmBnK,EAAQkE,EAAcM,QAClDiF,YAAW,WACT,EAAK,WAAD,OAAYM,IAAU/F,aAAahE,KACtC,IAAM4E,EAAIyD,GAbP,K,+BAkBF,IAAD,OACP,OACE,yBAAK7H,UAAU,mBACZqB,KAAKmG,MAAMzE,KAAI,SAAC9C,EAAOwJ,GACtB,OACE,kBAAC,EAAD,CACExG,IAAKwG,EACLxJ,MAAOA,EACPd,MAAO,EAAKA,MACZmC,MAAO,SAAAsI,GAAG,OAAK,EAAK,WAAD,OAAYH,IAASG,QAK9C,yBACE5J,UAAU,YACViD,IAAK,QACLgB,MAAO,CACL7E,OAAO,GAAD,OAAQ,IAAM+D,EAAU,IAAO,IAAO,IAAtC,c,GAlVKnB,aCbjB6H,EAAa,CACjB,cACA,iBACA,aACA,aACA,YACA,aACA,eAGIC,EAAS,CAAC,OAAQ,SAAU,QAiGnBC,E,YA9Fb,aAAe,IAAD,8BACZ,+CAKFC,sBAAwB,SAAApC,GACtB,EAAKqC,aAAerC,GAPR,EAUdsC,kBAAoB,SAAAC,GAClB,EAAKC,SAAWD,GAXJ,EAcdE,qBAAuB,WACrB,EAAKC,SAASC,uBAfF,EAkBdC,sBAAwB,SAAC1I,EAAOC,GAC1BA,IAAa,EAAKuI,SAAShD,WAAc,EAAKgD,SAAS7C,eACzD,EAAK6C,SAAShD,UAAYvF,EAC1B,EAAKuI,SAASC,wBArBJ,EAyBdE,gBAAkB,WAChB,IAAI5C,EAAQ,EACZ,OAAQ,EAAKuC,UACX,IAAK,OACHvC,EAAQ,EACR,MACF,IAAK,SACHA,EAAQ,EACR,MACF,IAAK,OACHA,EAAQ,EACR,MACF,QACEA,EAAQ,EAGP,EAAKyC,SAAS7C,cAAc,EAAKiD,OAAOtI,SAAS,CAAExB,UAAU,IAClE,EAAK0J,SAASK,UAAU,EAAKV,aAAcpC,IA1C/B,EA6Cd+C,0BAA4B,WAC1B,EAAKF,OAAOtI,SAAS,CAAExB,UAAU,KA5CjC,EAAKqJ,aAAe,cACpB,EAAKG,SAAW,OAHJ,E,sEAiDJ,IAAD,OACP,OACE,6BACE,kBAACS,EAAA,EAAD,CAAQC,QAAQ,UACd,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,sBACA,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CACErL,KAAM,YACN2C,KAAM,SACNG,QAASrB,KAAKoJ,kBAEhB,kBAAC,EAAD,CACE7K,KAAM,aACN2C,KAAM,WACNO,SAAU+G,EACVxH,QAAShB,KAAK4I,aACd3H,aAAcjB,KAAK2I,wBAErB,kBAAC,EAAD,CACEpK,KAAM,kBACN2C,KAAM,SACNG,QAASrB,KAAKgJ,uBAEhB,kBAAC,EAAD,CACExI,SAAUR,KAAKmJ,sBACflJ,MAAO,SAAAsI,GAAG,OAAK,EAAKc,OAASd,KAE/B,kBAAC,EAAD,CACEhK,KAAM,QACN2C,KAAM,WACNO,SAAUgH,EACVzH,QAAShB,KAAK+I,SACd9H,aAAcjB,KAAK6I,sBAIzB,kBAAC,EAAD,CACEhB,oBAAqB7H,KAAKuJ,0BAC1BtJ,MAAO,SAAAsI,GAAG,OAAK,EAAKU,SAAWV,U,GAxFT5H,a,YCPjBkJ,MARf,WACE,OACE,yBAAKlL,UAAU,OACb,kBAAC,EAAD,QCIcmL,QACW,cAA7B/H,OAAOgI,SAASC,UAEe,UAA7BjI,OAAOgI,SAASC,UAEhBjI,OAAOgI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a1350ed5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\n\r\nconst styles = theme => ({\r\n  thumb: {\r\n    \"&$open\": {\r\n      \"& $offset\": {\r\n        transform: \"scale(1) translateY(-10px)\"\r\n      }\r\n    }\r\n  },\r\n  open: {},\r\n  offset: {\r\n    zIndex: 1,\r\n    ...theme.typography.body2,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    lineHeight: 1.2,\r\n    transition: theme.transitions.create([\"transform\"], {\r\n      duration: theme.transitions.duration.shortest\r\n    }),\r\n    top: -34,\r\n    left: \"calc(-50% + -4px)\",\r\n    transformOrigin: \"bottom center\",\r\n    transform: \"scale(0)\",\r\n    position: \"absolute\"\r\n  },\r\n  circle: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: 24,\r\n    height: 24,\r\n    borderRadius: \"50% 50% 50% 0\",\r\n    backgroundColor: \"currentColor\",\r\n    transform: \"rotate(-45deg)\"\r\n  },\r\n  label: {\r\n    color: theme.palette.primary.contrastText,\r\n    transform: \"rotate(45deg)\"\r\n  }\r\n});\r\n\r\nfunction ValueLabel(props) {\r\n  const {\r\n    children,\r\n    classes,\r\n    className,\r\n    open,\r\n    value,\r\n    valueLabelDisplay\r\n  } = props;\r\n\r\n  if (valueLabelDisplay === \"off\") {\r\n    return children;\r\n  }\r\n\r\n  return React.cloneElement(\r\n    children,\r\n    {\r\n      className: clsx(\r\n        children.props.className,\r\n        {\r\n          [classes.open]: open || valueLabelDisplay === \"on\"\r\n        },\r\n        classes.thumb\r\n      )\r\n    },\r\n    <span className={clsx(classes.offset, className)}>\r\n      <span className={classes.circle}>\r\n        <span className={classes.label}>{value}</span>\r\n      </span>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles, { name: \"PrivateValueLabel\" })(ValueLabel);\r\n","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport ValueLabel from \"./ValueLabel\";\r\n\r\nconst PrettoSlider = withStyles({\r\n  root: {\r\n    color: \"rgb(76, 187, 159)\",\r\n    height: 8,\r\n    width: 160,\r\n    marginTop: 2,\r\n    marginRight: 32,\r\n    marginLeft: -15\r\n  },\r\n  active: {},\r\n  disabled: {},\r\n  thumb: {\r\n    height: 20,\r\n    width: 20,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid currentColor\",\r\n    marginTop: -6,\r\n    marginLeft: -7,\r\n    \"&$disabled\": {\r\n      width: 20,\r\n      height: 20,\r\n      backgroundColor: \"rgb(252, 4, 4)\",\r\n      marginTop: -6,\r\n      marginLeft: -7,\r\n      \"&:hover\": {\r\n        boxShadow: \"none\"\r\n      }\r\n    },\r\n    \"&:focus,&:hover,&$active\": {\r\n      boxShadow: \"inherit\"\r\n    }\r\n  },\r\n  valueLabel: {\r\n    left: \"calc(-50% + 4px)\",\r\n    top: \"-26px\"\r\n  },\r\n  track: {\r\n    height: 8,\r\n    borderRadius: 4\r\n  },\r\n  rail: {\r\n    height: 8,\r\n    borderRadius: 4\r\n  }\r\n})(Slider);\r\n\r\nclass MySlider extends Component {\r\n  state = { disabled: false };\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <PrettoSlider\r\n        valueLabelDisplay=\"auto\"\r\n        defaultValue={75}\r\n        min={8}\r\n        max={150}\r\n        disabled={this.state.disabled}\r\n        // ValueLabelComponent={ValueLabelComponent}\r\n        ValueLabelComponent={ValueLabel}\r\n        onChange={(event, newValue) => this.props.onChange(event, newValue)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default MySlider;\r\n","import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navitem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: props.name, type: props.type, curItem: props.curItem };\r\n  }\r\n\r\n  handleChangeItem = item => {\r\n    this.setState({ curItem: item });\r\n    this.props.onChangeItem(item);\r\n  };\r\n\r\n  render() {\r\n    const { type } = this.state;\r\n    if (type === \"button\") {\r\n      return (\r\n        <li>\r\n          <Button id=\"button\" onClick={() => this.props.onClick()}>\r\n            {this.state.name}\r\n          </Button>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li>\r\n          <Dropdown>\r\n            <Dropdown.Toggle id=\"dropdown-toggle\">\r\n              {this.state.name + \" : \" + this.state.curItem + \"  \"}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {this.props.itemList.map(item => {\r\n                return (\r\n                  <Dropdown.Item\r\n                    key={item}\r\n                    onSelect={() => this.handleChangeItem(item)}\r\n                    id=\"dropdown-item\"\r\n                  >\r\n                    {item}\r\n                  </Dropdown.Item>\r\n                );\r\n              })}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Navitem;\r\n","import React, { Component } from \"react\";\r\nimport \"./Arraybar.css\";\r\n\r\nconst HEIGHT = window.innerHeight;\r\n\r\nclass Element extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: props.value,\r\n      width: props.width,\r\n      animation: animationType.DEFAULT\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  setElement = (value, width) => {\r\n    this.setState({ value, width });\r\n  };\r\n\r\n  setAnimation = animation => {\r\n    this.setState({ animation });\r\n  };\r\n\r\n  render() {\r\n    let { width, value, animation } = this.state;\r\n    let animationname =\r\n      animation === animationType.RED\r\n        ? \"red\"\r\n        : animation === animationType.BLUE\r\n        ? \"blue\"\r\n        : animation === animationType.YELLOW\r\n        ? \"yellow\"\r\n        : animation === animationType.PURPLE\r\n        ? \"purple\"\r\n        : \"\";\r\n    return (\r\n      <div\r\n        className={`array-bar ${animationname}`}\r\n        style={{\r\n          width: `${width}px`,\r\n          height: `${(((value * HEIGHT) / 937) * 790) / 250}px`\r\n        }}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Element;\r\n\r\nexport const animationType = {\r\n  DEFAULT: 1,\r\n  RED: 2,\r\n  BLUE: 3,\r\n  YELLOW: 4,\r\n  PURPLE: 5\r\n};\r\n","function swap(arr, i, j) {\r\n  let temp = arr[i];\r\n  arr[i] = arr[j];\r\n  arr[j] = temp;\r\n}\r\n\r\n// bubble sort implentation\r\nexport function bubbleSort(arr) {\r\n  const n = arr.length;\r\n  let animations = [];\r\n\r\n  // bubble the maximum to the end\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      // for comparing animation\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      animations.push([j, j + 1]);\r\n      if (arr[j] > arr[j + 1]) {\r\n        // swap\r\n        animations.push([j, j + 1, arr[j], arr[j + 1], j + 1 === n - i - 1]); // for swapping animation\r\n        swap(arr, j, j + 1);\r\n      } else {\r\n        animations.push([j, j + 1, arr[j + 1], arr[j], j + 1 === n - i - 1]); // not swapping\r\n      }\r\n    }\r\n  }\r\n\r\n  // final animation\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0]);\r\n  animations.push([0, 0, arr[0], arr[0], true]);\r\n\r\n  return animations;\r\n}\r\n\r\n// insertion sort implentation\r\nfunction insertionSortHelper(arr, l, r, animations) {\r\n  // only one element\r\n  if (l === r) {\r\n    // for comparing animation\r\n    animations.push([l]);\r\n    animations.push([l]);\r\n    animations.push([l]);\r\n\r\n    // for overwriting animation\r\n    animations.push([l, arr[l], true]);\r\n  }\r\n\r\n  // insert every element\r\n  for (let i = l + 1; i <= r; i++) {\r\n    let j;\r\n    let temp = arr[i];\r\n\r\n    // find the spot to insert in sorted array\r\n    for (j = i; j > l && arr[j - 1] > temp; j--) {\r\n      // for comparing animation\r\n      animations.push([j]);\r\n      animations.push([j]);\r\n      animations.push([j]);\r\n\r\n      // for overwriting animation\r\n      animations.push([j, arr[j - 1], i === r]);\r\n      arr[j] = arr[j - 1];\r\n    }\r\n\r\n    // for comparing animation\r\n    animations.push([j]);\r\n    animations.push([j]);\r\n    animations.push([j]);\r\n\r\n    // for overwriting animation\r\n    animations.push([j, temp, i === r]);\r\n\r\n    arr[j] = temp;\r\n\r\n    // sorted animations\r\n    if (i === r) {\r\n      for (let k = j - 1; k >= l; k--) {\r\n        // for comparing animation\r\n        animations.push([k]);\r\n        animations.push([k]);\r\n        animations.push([k]);\r\n\r\n        // for overwriting animation\r\n        animations.push([k, arr[k], i === r]);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function insertionSort(arr) {\r\n  const n = arr.length;\r\n  let animations = [];\r\n\r\n  insertionSortHelper(arr, 0, n - 1, animations);\r\n  return animations;\r\n}\r\n\r\n// quick sort implentation\r\nfunction getRandomPivot(l, r) {\r\n  return l + Math.floor(Math.random() * (r - l + 1));\r\n}\r\n\r\nfunction partition(arr, l, r, pivot, animations) {\r\n  let partitionIdx = l - 1;\r\n  const pivotElement = arr[pivot];\r\n\r\n  animations.push([r, pivot]);\r\n  animations.push([r, pivot]);\r\n  animations.push([r, pivot]);\r\n  animations.push([r, pivot, arr[r], arr[pivot], 2]);\r\n  swap(arr, r, pivot); // swap pivot with right most elemtn;\r\n\r\n  for (let i = l; i < r; i++) {\r\n    animations.push([i, partitionIdx + 1]);\r\n    animations.push([i, partitionIdx + 1]);\r\n    animations.push([i, partitionIdx + 1]);\r\n\r\n    if (arr[i] <= pivotElement) {\r\n      animations.push([i, partitionIdx + 1, arr[i], arr[partitionIdx + 1], 3]);\r\n      swap(arr, i, ++partitionIdx);\r\n    } else {\r\n      animations.push([i, partitionIdx + 1, arr[partitionIdx + 1], arr[i], 3]);\r\n    }\r\n  }\r\n\r\n  animations.push([r, partitionIdx + 1]);\r\n  animations.push([r, partitionIdx + 1]);\r\n  animations.push([r, partitionIdx + 1]);\r\n  animations.push([r, partitionIdx + 1, arr[r], arr[partitionIdx + 1], 1]);\r\n  swap(arr, r, ++partitionIdx); // swap pivot back\r\n  return partitionIdx;\r\n}\r\n\r\nfunction quickSortHelper(arr, l, r, animations) {\r\n  if (l > r) return;\r\n  const pivot = getRandomPivot(l, r);\r\n  const partitionIdx = partition(arr, l, r, pivot, animations);\r\n\r\n  quickSortHelper(arr, partitionIdx + 1, r, animations);\r\n  quickSortHelper(arr, l, partitionIdx - 1, animations);\r\n}\r\n\r\nexport function quickSort(arr) {\r\n  let animations = [];\r\n  quickSortHelper(arr, 0, arr.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\n// merge sort implentation\r\nfunction merge(arr, l, r, m, animations) {\r\n  const n1 = m - l + 1;\r\n  const n2 = r - m;\r\n  const L = new Array(n1);\r\n  const R = new Array(n2);\r\n\r\n  // copy left array\r\n  for (let i = 0; i < n1; i++) {\r\n    L[i] = arr[i + l];\r\n  }\r\n\r\n  // copy right array\r\n  for (let i = 0; i < n2; i++) {\r\n    R[i] = arr[i + m + 1];\r\n  }\r\n\r\n  let k = l;\r\n  let idxL = 0; // index for left array\r\n  let idxR = 0; // index for right array\r\n  const isSorted = l === 0 && r === arr.length - 1;\r\n\r\n  // merge two arrays\r\n  while (idxL < n1 && idxR < n2) {\r\n    animations.push([idxL + l, idxR + m + 1]); // comparing elements at i ,j in the orignal array\r\n    animations.push([idxL + l, idxR + m + 1]); // comparing elements at i ,j in the orignal array\r\n    animations.push([idxL + l, idxR + m + 1]); // comparing elements at i ,j in the orignal array\r\n\r\n    if (L[idxL] < R[idxR]) {\r\n      animations.push([k, L[idxL], isSorted, idxL + l]); // replace element at k of the original array with L[idxL]\r\n      arr[k++] = L[idxL++];\r\n    } else {\r\n      animations.push([k, R[idxR], false, k]); // replace element at k of the original array with R[idxR];\r\n      arr[k++] = R[idxR++];\r\n    }\r\n  }\r\n\r\n  // add remaining elements\r\n  while (idxL < n1) {\r\n    animations.push([idxL + l, idxL + l]);\r\n    animations.push([idxL + l, idxL + l]);\r\n    animations.push([idxL + l, idxL + l]);\r\n    animations.push([k, L[idxL], isSorted, idxL + l]); // replace element at k of the original array with L[idxL]\r\n    arr[k++] = L[idxL++];\r\n  }\r\n\r\n  while (idxR < n2) {\r\n    animations.push([idxR + m + 1, idxR + m + 1]);\r\n    animations.push([idxR + m + 1, idxR + m + 1]);\r\n    animations.push([idxR + m + 1, idxR + m + 1]);\r\n    animations.push([k, R[idxR], false, k]); // replace element at k of the original array with R[idxR];\r\n    arr[k++] = R[idxR++];\r\n  }\r\n\r\n  // sorted animations\r\n  if (isSorted) {\r\n    for (let i = idxL + l; i <= r; i++) {\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([i, i]);\r\n      animations.push([i, arr[i], isSorted, i]);\r\n    }\r\n  }\r\n}\r\n\r\nfunction mergeSortHelper(arr, l, r, animations) {\r\n  if (l === r) return;\r\n\r\n  const m = l + Math.floor((r - l) / 2);\r\n  mergeSortHelper(arr, l, m, animations);\r\n  mergeSortHelper(arr, m + 1, r, animations);\r\n  merge(arr, l, r, m, animations);\r\n}\r\n\r\nexport function mergeSort(arr) {\r\n  let animations = [];\r\n  mergeSortHelper(arr, 0, arr.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\n// heap sort implentation\r\nfunction heapify(arr, n, i, animations) {\r\n  if (n === 0) return;\r\n  let largestIdx = i;\r\n  let l = 2 * i + 1; // left child\r\n  let r = 2 * i + 2; // right child\r\n\r\n  if (l < n && arr[l] > arr[largestIdx]) largestIdx = l; // heapify left child\r\n  if (r < n && arr[r] > arr[largestIdx]) largestIdx = r; // heapify right child\r\n\r\n  animations.push([i, largestIdx]);\r\n  animations.push([i, largestIdx]);\r\n  animations.push([i, largestIdx]);\r\n  // if more heapify needed\r\n  if (largestIdx !== i) {\r\n    // swap\r\n    animations.push([i, largestIdx, arr[i], arr[largestIdx], false]);\r\n    swap(arr, i, largestIdx);\r\n\r\n    // heapify affectd subtrees\r\n    heapify(arr, n, largestIdx, animations);\r\n  } else {\r\n    animations.push([i, largestIdx, arr[largestIdx], arr[i], false]);\r\n  }\r\n}\r\n\r\nexport function heapSort(arr) {\r\n  const n = arr.length;\r\n  let animations = [];\r\n\r\n  // build max heap\r\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--)\r\n    heapify(arr, n, i, animations);\r\n\r\n  // extract sorted element\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    // swap to the end\r\n    animations.push([0, i]);\r\n    animations.push([0, i]);\r\n    animations.push([0, i]);\r\n    animations.push([0, i, arr[0], arr[i], true]);\r\n    swap(arr, 0, i);\r\n\r\n    // call max heapify on the reduced heap\r\n    heapify(arr, i, 0, animations);\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\n// radix sort implentation\r\nfunction countSort(arr, n, minValue, exp, radix, animations) {\r\n  let sortedArr = new Array(n);\r\n  let buckets = new Array(radix);\r\n  sortedArr.fill(0);\r\n  buckets.fill(0);\r\n  let firstBuckets = [];\r\n\r\n  // count occurences of digit of arr[i]\r\n  for (let i = 0; i < n; i++) {\r\n    const bucketIdx = Math.floor((arr[i] - minValue) / exp) % radix;\r\n\r\n    // linearly scan for buckets\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, arr[i], false]);\r\n    buckets[bucketIdx]++;\r\n  }\r\n\r\n  // change count[i] so that count[i] now contains actual position\r\n  for (let i = 1; i < radix; i++) buckets[i] += buckets[i - 1];\r\n\r\n  // find last bucket's element\r\n  for (let i of buckets) firstBuckets.push(i - 1);\r\n\r\n  // overwriting animations\r\n  let overwriting = [];\r\n\r\n  // build the shadow array\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    const bucketIdx = Math.floor((arr[i] - minValue) / exp) % radix;\r\n    if (firstBuckets.includes(buckets[bucketIdx] - 1)) {\r\n      overwriting.unshift([buckets[bucketIdx] - 1, arr[i], true]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n    } else {\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, arr[i], false]);\r\n    }\r\n    sortedArr[--buckets[bucketIdx]] = arr[i];\r\n  }\r\n\r\n  for (let animation of overwriting) animations.push(animation);\r\n\r\n  // copy sorted array;\r\n  for (let i = 0; i < n; i++) arr[i] = sortedArr[i];\r\n\r\n  // remove bucket yellow color\r\n  for (let i of firstBuckets) {\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, 1]);\r\n    animations.push([i, arr[i], false]);\r\n  }\r\n}\r\n\r\nexport function radixSort(arr, radix) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n\r\n  // find maximum and minimum to get the most number of digits\r\n  let maxValue = arr[0];\r\n  let minValue = arr[0];\r\n  for (let i = 1; i < arr.length; i++) {\r\n    maxValue = Math.max(maxValue, arr[i]);\r\n    minValue = Math.min(minValue, arr[i]);\r\n  }\r\n\r\n  // repeated counting sort for each digit\r\n  for (let exp = 1; (maxValue - minValue) / exp >= 1; exp *= radix)\r\n    countSort(arr, n, minValue, exp, radix, animations);\r\n\r\n  // firnish sorted animations\r\n  for (let i = 0; i < n; i++) {\r\n    animations.push([i, 2]);\r\n    animations.push([i, 2]);\r\n    animations.push([i, 2]);\r\n    animations.push([i, arr[i], false]);\r\n  }\r\n\r\n  return animations;\r\n}\r\n\r\n// bucket sort implentation\r\nexport function bucketSort(arr, bucketSize) {\r\n  let animations = [];\r\n  const n = arr.length;\r\n  let firstBuckets = [];\r\n  let output = new Array(n);\r\n  let buckets = new Array(bucketSize);\r\n  output.fill(0);\r\n  buckets.fill(0);\r\n\r\n  // find maximum and minimum to get the most number of digits\r\n  let maxValue = arr[0];\r\n  for (let i = 1; i < n; i++) maxValue = Math.max(maxValue, arr[i]);\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    const bucketIdx =\r\n      arr[i] === maxValue\r\n        ? bucketSize - 1\r\n        : Math.floor((arr[i] * bucketSize) / maxValue);\r\n    // linearly scan for buckets\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, 0]);\r\n    animations.push([i, arr[i]]);\r\n    buckets[bucketIdx]++;\r\n  }\r\n\r\n  // change count[i] so that count[i] now contains actual position\r\n  for (let i = 1; i < bucketSize; i++) buckets[i] += buckets[i - 1];\r\n  const copy = [...buckets];\r\n\r\n  // find last bucket's element\r\n  for (let i of buckets) firstBuckets.push(i - 1);\r\n\r\n  // overwriting animations\r\n  let overwriting = [];\r\n\r\n  // build the shadow array\r\n  for (let i = n - 1; i >= 0; i--) {\r\n    const bucketIdx =\r\n      arr[i] === maxValue\r\n        ? bucketSize - 1\r\n        : Math.floor((arr[i] * bucketSize) / maxValue);\r\n    if (firstBuckets.includes(buckets[bucketIdx] - 1)) {\r\n      overwriting.unshift([buckets[bucketIdx] - 1, arr[i], false, true]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n      overwriting.unshift([buckets[bucketIdx] - 1, 3]);\r\n    } else {\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, 0]);\r\n      overwriting.push([buckets[bucketIdx] - 1, arr[i], false, false]);\r\n    }\r\n    output[--buckets[bucketIdx]] = arr[i];\r\n  }\r\n\r\n  for (let animation of overwriting) animations.push(animation);\r\n\r\n  // copy sorted array;\r\n  for (let i = 0; i < n; i++) arr[i] = output[i];\r\n\r\n  // divide into buckets and sort each of them using insertion sort\r\n  for (let i = -1; i < bucketSize - 1; i++) {\r\n    let l = i === -1 ? 0 : copy[i];\r\n    let r = copy[i + 1] - 1;\r\n    insertionSortHelper(arr, l, r, animations);\r\n  }\r\n\r\n  return animations;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Element from \"./Element\";\r\nimport { animationType } from \"./Element\";\r\nimport \"./Arraybar.css\";\r\nimport {\r\n  bubbleSort,\r\n  insertionSort,\r\n  quickSort,\r\n  mergeSort,\r\n  heapSort,\r\n  radixSort,\r\n  bucketSort\r\n} from \"../algorithms/sorting\";\r\n\r\nconst HEIGHT = window.innerHeight;\r\nconst WIDTH = window.innerWidth;\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return min + Math.floor(Math.random() * (max - min + 1));\r\n}\r\n\r\nclass Arraybar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { generate: 0 };\r\n\r\n    // construct initial array\r\n    this.arraySize = 75; // default array size\r\n    this.width = Math.ceil((900 / this.arraySize / 1920) * WIDTH); // width of the array bar depends on the array size\r\n    this.array = [];\r\n    this.isVisualized = false;\r\n    this.constructInitArray();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  constructInitArray() {\r\n    for (let i = 0; i < this.arraySize; i++) {\r\n      this.array.push(randomIntFromInterval(10, 250));\r\n    }\r\n  }\r\n\r\n  setArray() {\r\n    for (let i = 0; i < this.array.length; i++) {\r\n      this[`element-${i}`].setElement(this.array[i], this.width);\r\n      this[`element-${i}`].setAnimation(animationType.DEFAULT);\r\n    }\r\n  }\r\n\r\n  randomGenerateArray() {\r\n    if (this.isVisualized) return;\r\n    this.width = Math.ceil((900 / this.arraySize / 1920) * WIDTH); // reset width\r\n    this.array = []; // reset array\r\n\r\n    for (let i = 0; i < this.arraySize; i++) {\r\n      this.array.push(randomIntFromInterval(10, 250));\r\n    }\r\n\r\n    this.setState({ generate: this.state.generate ^ 1 }, this.setArray);\r\n  }\r\n\r\n  resetAnimations() {\r\n    for (let i = 0; i < this.arraySize; i++) {\r\n      this[`element-${i}`].setAnimation(animationType.DEFAULT);\r\n    }\r\n  }\r\n\r\n  visualize(algorithm, speed) {\r\n    if (this.isVisualized) return;\r\n    this.isVisualized = true;\r\n\r\n    this.resetAnimations();\r\n\r\n    let animations = [];\r\n    switch (algorithm) {\r\n      case \"Bubble Sort\":\r\n        animations = bubbleSort(this.array);\r\n        this.bubbleSortAnimations(animations, speed);\r\n        break;\r\n      case \"Insertion Sort\":\r\n        animations = insertionSort(this.array);\r\n        this.insertionSortAnimations(animations, speed);\r\n        break;\r\n      case \"Quick Sort\":\r\n        animations = quickSort(this.array);\r\n        this.quickSortAnimations(animations, speed);\r\n        break;\r\n      case \"Merge Sort\":\r\n        animations = mergeSort(this.array);\r\n        this.mergeSortAnimations(animations, speed);\r\n        break;\r\n      case \"Heap Sort\":\r\n        animations = heapSort(this.array);\r\n        this.heapSortAnimations(animations, speed);\r\n        break;\r\n      case \"Radix Sort\":\r\n        const radix = 4;\r\n        animations = radixSort(this.array, radix);\r\n        this.radixSortAnimations(animations, speed);\r\n        break;\r\n      case \"Bucket Sort\":\r\n        const bucketSize = Math.floor((this.arraySize * 10) / 150) + 2;\r\n        animations = bucketSort(this.array, bucketSize);\r\n        this.bucketSortAnimations(animations, speed);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    // finish visualization\r\n    setTimeout(() => {\r\n      this.isVisualized = false;\r\n      this.props.finishVisualization();\r\n    }, 310 + animations.length * speed);\r\n  }\r\n\r\n  bubbleSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isSorted] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isPivot\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isPivot === 1) {\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n          } else if (isPivot === 2) {\r\n            this[`element-${barOneIdx}`].setAnimation(animationType.YELLOW);\r\n          }\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  mergeSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isSorted] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n          if (isSorted) {\r\n            let idx = animations[i][3];\r\n            this[`element-${idx}`].setAnimation(animationType.PURPLE);\r\n          }\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  heapSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // swapping\r\n        const [\r\n          barOneIdx,\r\n          barTwoIdx,\r\n          barOneValue,\r\n          barTwoValue,\r\n          isSorted\r\n        ] = animations[i];\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setElement(barTwoValue, this.width);\r\n          this[`element-${barTwoIdx}`].setElement(barOneValue, this.width);\r\n          if (isSorted)\r\n            this[`element-${barTwoIdx}`].setAnimation(animationType.PURPLE);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        setTimeout(() => {\r\n          this[`element-${barOneIdx}`].setAnimation(color);\r\n          this[`element-${barTwoIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  radixSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isBucket] = animations[i];\r\n        setTimeout(() => {\r\n          if (isBucket)\r\n            this[`element-${barIdx}`].setAnimation(animationType.YELLOW);\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barIdx, bucketColor] = animations[i];\r\n        let color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        if (bucketColor === 1) color = animationType.DEFAULT;\r\n        else if (bucketColor === 2) color = animationType.PURPLE;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  bucketSortAnimations(animations, speed) {\r\n    for (let i = 0; i < animations.length; i++) {\r\n      if (i % 4 === 3) {\r\n        // overwriting\r\n        const [barIdx, newValue, isSorted, isBucket] = animations[i];\r\n        setTimeout(() => {\r\n          if (isBucket)\r\n            this[`element-${barIdx}`].setAnimation(animationType.YELLOW);\r\n          if (isSorted)\r\n            this[`element-${barIdx}`].setAnimation(animationType.PURPLE);\r\n          this[`element-${barIdx}`].setElement(newValue, this.width);\r\n        }, 300 + i * speed);\r\n      } else {\r\n        // comparing\r\n        const [barIdx, bucketColor] = animations[i];\r\n        let color =\r\n          i % 4 === 0\r\n            ? animationType.RED\r\n            : i % 4 === 1\r\n            ? animationType.BLUE\r\n            : animationType.DEFAULT;\r\n        if (bucketColor === 1) color = animationType.DEFAULT;\r\n        else if (bucketColor === 2) color = animationType.PURPLE;\r\n        setTimeout(() => {\r\n          this[`element-${barIdx}`].setAnimation(color);\r\n        }, 300 + i * speed);\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"array-container\">\r\n        {this.array.map((value, idx) => {\r\n          return (\r\n            <Element\r\n              key={idx}\r\n              value={value}\r\n              width={this.width}\r\n              onRef={ref => (this[`element-${idx}`] = ref)}\r\n            ></Element>\r\n          );\r\n        })}\r\n\r\n        <div\r\n          className=\"array-bar\"\r\n          key={\"extra\"}\r\n          style={{\r\n            height: `${(((250 * HEIGHT) / 937) * 790) / 250}px`\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Arraybar;\r\n","import React, { Component } from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport MySlider from \"./Slider\";\r\nimport Navitem from \"./Navitem\";\r\nimport Arraybar from \"./Arraybar\";\r\nimport \"./Navbar.css\";\r\n\r\nconst algorithms = [\r\n  \"Bubble Sort\",\r\n  \"Insertion Sort\",\r\n  \"Quick Sort\",\r\n  \"Merge Sort\",\r\n  \"Heap Sort\",\r\n  \"Radix Sort\",\r\n  \"Bucket Sort\"\r\n];\r\n\r\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\r\n\r\nclass SortingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.curAlgorithm = \"Bubble Sort\";\r\n    this.curSpeed = \"Fast\";\r\n  }\r\n\r\n  handleChangeAlgorithm = algorithm => {\r\n    this.curAlgorithm = algorithm;\r\n  };\r\n\r\n  handleChangeSpeed = speedname => {\r\n    this.curSpeed = speedname;\r\n  };\r\n\r\n  handleRandomGenerate = () => {\r\n    this.arrayBar.randomGenerateArray();\r\n  };\r\n\r\n  handleChangeArraySize = (event, newValue) => {\r\n    if (newValue !== this.arrayBar.arraySize && !this.arrayBar.isVisualized) {\r\n      this.arrayBar.arraySize = newValue;\r\n      this.arrayBar.randomGenerateArray();\r\n    }\r\n  };\r\n\r\n  handleVisualize = () => {\r\n    let speed = 5;\r\n    switch (this.curSpeed) {\r\n      case \"Fast\":\r\n        speed = 5;\r\n        break;\r\n      case \"Medium\":\r\n        speed = 7;\r\n        break;\r\n      case \"Slow\":\r\n        speed = 9;\r\n        break;\r\n      default:\r\n        speed = 3;\r\n        break;\r\n    }\r\n    if (!this.arrayBar.isVisualized) this.slider.setState({ disabled: true });\r\n    this.arrayBar.visualize(this.curAlgorithm, speed);\r\n  };\r\n\r\n  handleFinishVisualization = () => {\r\n    this.slider.setState({ disabled: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar variant=\"custom\">\r\n          <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\r\n          <Nav>\r\n            <Navitem\r\n              name={\"Visualize\"}\r\n              type={\"button\"}\r\n              onClick={this.handleVisualize}\r\n            />\r\n            <Navitem\r\n              name={\"Algorithms\"}\r\n              type={\"dropdown\"}\r\n              itemList={algorithms}\r\n              curItem={this.curAlgorithm}\r\n              onChangeItem={this.handleChangeAlgorithm}\r\n            />\r\n            <Navitem\r\n              name={\"Random Generate\"}\r\n              type={\"button\"}\r\n              onClick={this.handleRandomGenerate}\r\n            />\r\n            <MySlider\r\n              onChange={this.handleChangeArraySize}\r\n              onRef={ref => (this.slider = ref)}\r\n            />\r\n            <Navitem\r\n              name={\"Speed\"}\r\n              type={\"dropdown\"}\r\n              itemList={speeds}\r\n              curItem={this.curSpeed}\r\n              onChangeItem={this.handleChangeSpeed}\r\n            />\r\n          </Nav>\r\n        </Navbar>\r\n        <Arraybar\r\n          finishVisualization={this.handleFinishVisualization}\r\n          onRef={ref => (this.arrayBar = ref)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import React from \"react\";\r\nimport SortingVisualizer from \"./components/SortingVisualizer\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}