{"version":3,"sources":["components/Navitem.jsx","algorithms/sorting.js","components/Arraybar.jsx","components/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Navitem","props","handleChangeItem","item","setState","curItem","onChangeItem","state","name","type","this","Button","id","onClick","Dropdown","Toggle","Menu","itemList","map","Item","key","onSelect","Component","mergeSortHelper","arr","l","r","m","Math","floor","n1","n2","L","Array","R","i","k","idxL","idxR","merge","Arraybar","array","onRef","randomGenerateArray","undefined","min","max","arraySize","push","random","algorithm","speed","n","length","j","temp","bubbleSort","insertionSort","width","ceil","className","value","idx","style","height","window","innerHeight","algorithms","speeds","SortingVisualizer","handleChangeAlgorithm","curAlgorithm","handleChangeSpeed","speedname","curSpeed","handleRandomGenerate","arrayBar","handleChangeArraySize","handleVisualize","visualize","innerWidth","Navbar","variant","Brand","href","Nav","ref","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c68363f2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { Dropdown } from \"react-bootstrap\";\r\nimport \"./Navbar.css\";\r\n\r\nclass Navitem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: props.name, type: props.type, curItem: props.curItem };\r\n  }\r\n\r\n  handleChangeItem = item => {\r\n    this.setState({ curItem: item });\r\n    this.props.onChangeItem(item);\r\n  };\r\n\r\n  render() {\r\n    const { type } = this.state;\r\n    if (type === \"button\") {\r\n      return (\r\n        <li>\r\n          <Button id=\"button\" onClick={() => this.props.onClick()}>\r\n            {this.state.name}\r\n          </Button>\r\n        </li>\r\n      );\r\n    } else {\r\n      return (\r\n        <li>\r\n          <Dropdown>\r\n            <Dropdown.Toggle id=\"dropdown-toggle\">\r\n              {this.state.name + \" : \" + this.state.curItem + \"  \"}\r\n            </Dropdown.Toggle>\r\n\r\n            <Dropdown.Menu>\r\n              {this.props.itemList.map(item => {\r\n                return (\r\n                  <Dropdown.Item\r\n                    key={item}\r\n                    onSelect={() => this.handleChangeItem(item)}\r\n                    id=\"dropdown-item\"\r\n                  >\r\n                    {item}\r\n                  </Dropdown.Item>\r\n                );\r\n              })}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </li>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Navitem;\r\n","// bubble sort implentation\r\nexport function bubbleSort(arr) {\r\n  const n = arr.length;\r\n\r\n  // bubble the maximum to the end\r\n  for (let i = 0; i < n; i++) {\r\n    for (let j = 0; j < n - i - 1; j++) {\r\n      if (arr[j] > arr[j + 1]) {\r\n        // swap\r\n        let temp = arr[j];\r\n        arr[j] = arr[j + 1];\r\n        arr[j + 1] = temp;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// insertion sort implentation\r\nexport function insertionSort(arr) {\r\n  const n = arr.length;\r\n\r\n  // insert every element\r\n  for (let i = 1; i < n; i++) {\r\n    let j;\r\n    let temp = arr[i];\r\n\r\n    // find the spot to insert in sorted array\r\n    for (j = i; j > 0 && arr[j - 1] > temp; j--) {\r\n      arr[j] = arr[j - 1];\r\n    }\r\n\r\n    arr[j] = temp;\r\n  }\r\n}\r\n\r\n// quick sort implentation\r\nfunction getRandomPivot(l, r) {\r\n  return l + Math.floor(Math.random() * (r - l + 1));\r\n}\r\n\r\nfunction partition(arr, l, r, pivot) {}\r\n\r\nexport function quickSort(arr) {}\r\n\r\n// merge sort implentation\r\nfunction merge(arr, l, r, m) {\r\n  const n1 = m - l + 1;\r\n  const n2 = r - m;\r\n  const L = new Array(n1);\r\n  const R = new Array(n2);\r\n\r\n  // copy left array\r\n  for (let i = 0; i < n1; i++) {\r\n    L[i] = arr[i + l];\r\n  }\r\n\r\n  // copy right array\r\n  for (let i = 0; i < n2; i++) {\r\n    R[i] = arr[i + m + 1];\r\n  }\r\n\r\n  let k = l;\r\n  let idxL = 0; // index for left array\r\n  let idxR = 0; // index for right array\r\n\r\n  // merge two arrays\r\n  while (idxL < n1 && idxR < n2) {\r\n    if (L[idxL] < R[idxR]) {\r\n      arr[k++] = L[idxL++];\r\n    } else {\r\n      arr[k++] = R[idxR++];\r\n    }\r\n  }\r\n\r\n  // add remaining elements\r\n  while (idxL < n1) {\r\n    arr[k++] = L[idxL++];\r\n  }\r\n\r\n  while (idxR < n2) {\r\n    arr[k++] = R[idxR++];\r\n  }\r\n}\r\n\r\nfunction mergeSortHelper(arr, l, r) {\r\n  if (l === r) return;\r\n\r\n  const m = l + Math.floor((r - l) / 2);\r\n  mergeSortHelper(arr, l, m);\r\n  mergeSortHelper(arr, m + 1, r);\r\n  merge(arr, l, r, m);\r\n}\r\n\r\nexport function mergeSort(arr) {\r\n  const n = arr.length;\r\n  mergeSortHelper(arr, 0, n - 1);\r\n}\r\n\r\n// heap sort implentation\r\nexport function heapSort(arr) {}\r\n\r\n// radix sort implentation\r\nexport function radixSort(arr) {}\r\n\r\n// bucket sort implentation\r\nexport function bucketSort(arr) {}\r\n","import React, { Component } from \"react\";\r\nimport \"./Arraybar.css\";\r\nimport {\r\n  bubbleSort,\r\n  insertionSort,\r\n  quickSort,\r\n  mergeSort\r\n} from \"../algorithms/sorting\";\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return min + Math.floor(Math.random() * (max - min + 1));\r\n}\r\n\r\nclass Arraybar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.onRef(this);\r\n    this.randomGenerateArray();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onRef(undefined);\r\n  }\r\n\r\n  randomGenerateArray() {\r\n    const array = [];\r\n\r\n    for (let i = 0; i < this.props.arraySize; i++) {\r\n      array.push(randomIntFromInterval(5, 500));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  visualize(algorithm, speed) {\r\n    const { array } = this.state;\r\n    switch (algorithm) {\r\n      case \"Bubble Sort\":\r\n        bubbleSort(array);\r\n        break;\r\n      case \"Insertion Sort\":\r\n        insertionSort(array);\r\n        break;\r\n      case \"Quick Sort\":\r\n        quickSort(array);\r\n        break;\r\n      case \"Merge Sort\":\r\n        mergeSort(array);\r\n        break;\r\n      case \"Heap Sort\":\r\n        break;\r\n      case \"Radix Sort\":\r\n        break;\r\n      case \"Bucket Sort\":\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  render() {\r\n    let width = Math.ceil(800 / this.props.arraySize); // width of the array bar depends on the array size\r\n\r\n    return (\r\n      <div className=\"array-container\">\r\n        {this.state.array.map((value, idx) => {\r\n          return (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                width: `${width}px`,\r\n                height: `${(((value * window.innerHeight) / 937) * 830) /\r\n                  500}px`\r\n              }}\r\n            ></div>\r\n          );\r\n        })}\r\n\r\n        <div\r\n          className=\"array-bar\"\r\n          key={\"extra\"}\r\n          style={{\r\n            height: `${(((500 * window.innerHeight) / 937) * 830) / 500}px`\r\n          }}\r\n        ></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Arraybar;\r\n","import React, { Component } from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport Navitem from \"./Navitem\";\r\nimport Arraybar from \"./Arraybar\";\r\nimport \"./Navbar.css\";\r\n\r\nconst algorithms = [\r\n  \"Bubble Sort\",\r\n  \"Insertion Sort\",\r\n  \"Quick Sort\",\r\n  \"Merge Sort\",\r\n  \"Heap Sort\",\r\n  \"Radix Sort\",\r\n  \"Bucket Sort\"\r\n];\r\n\r\nconst speeds = [\"Fast\", \"Medium\", \"Slow\"];\r\n\r\nclass SortingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.curAlgorithm = \"Bubble Sort\";\r\n    this.curSpeed = \"Fast\";\r\n    this.arraySize = Math.floor(window.innerWidth / 10);\r\n  }\r\n\r\n  handleChangeAlgorithm = algorithm => {\r\n    this.curAlgorithm = algorithm;\r\n  };\r\n\r\n  handleChangeSpeed = speedname => {\r\n    this.curSpeed = speedname;\r\n  };\r\n\r\n  handleRandomGenerate = () => {\r\n    this.arrayBar.randomGenerateArray();\r\n  };\r\n\r\n  handleChangeArraySize = () => {};\r\n\r\n  handleVisualize = () => {\r\n    let speed = 12;\r\n    switch (this.curSpeed) {\r\n      case \"Fast\":\r\n        speed = 12;\r\n        break;\r\n      case \"Medium\":\r\n        speed = 16;\r\n        break;\r\n      case \"Slow\":\r\n        speed = 20;\r\n        break;\r\n      default:\r\n        speed = 12;\r\n        break;\r\n    }\r\n    this.arrayBar.visualize(this.curAlgorithm, speed);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar variant=\"custom\">\r\n          <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\r\n          <Nav>\r\n            <Navitem\r\n              name={\"Visualize\"}\r\n              type={\"button\"}\r\n              onClick={this.handleVisualize}\r\n            />\r\n            <Navitem\r\n              name={\"Random Generate\"}\r\n              type={\"button\"}\r\n              onClick={this.handleRandomGenerate}\r\n            />\r\n            <Navitem\r\n              name={\"Algorithms\"}\r\n              type={\"dropdown\"}\r\n              itemList={algorithms}\r\n              curItem={this.curAlgorithm}\r\n              onChangeItem={this.handleChangeAlgorithm}\r\n            />\r\n            <Navitem\r\n              name={\"Speed\"}\r\n              type={\"dropdown\"}\r\n              itemList={speeds}\r\n              curItem={this.curSpeed}\r\n              onChangeItem={this.handleChangeSpeed}\r\n            />\r\n          </Nav>\r\n        </Navbar>\r\n        <Arraybar\r\n          arraySize={this.arraySize}\r\n          onRef={ref => (this.arrayBar = ref)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortingVisualizer;\r\n","import React from \"react\";\r\nimport SortingVisualizer from \"./components/SortingVisualizer\";\r\nimport \"./App.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SortingVisualizer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}